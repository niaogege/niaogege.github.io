<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>开到荼蘼</title>
  <subtitle>幸福就像花季，开到荼蘼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://niaogege.site/"/>
  <updated>2017-11-09T03:02:09.435Z</updated>
  <id>http://niaogege.site/</id>
  
  <author>
    <name>鸟哥哥</name>
    <email>291003932@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test of My Blog</title>
    <link href="http://niaogege.site/2017/11/09/test-of-my-blog/"/>
    <id>http://niaogege.site/2017/11/09/test-of-my-blog/</id>
    <published>2017-11-09T03:02:09.000Z</published>
    <updated>2017-11-09T03:02:09.435Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>随笔：未来不迎，当时不杂，既过不恋</title>
    <link href="http://niaogege.site/2017/11/05/%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%9C%AA%E6%9D%A5%E4%B8%8D%E8%BF%8E%EF%BC%8C%E5%BD%93%E6%97%B6%E4%B8%8D%E6%9D%82%EF%BC%8C%E6%97%A2%E8%BF%87%E4%B8%8D%E6%81%8B/"/>
    <id>http://niaogege.site/2017/11/05/随笔：未来不迎，当时不杂，既过不恋/</id>
    <published>2017-11-05T14:40:08.000Z</published>
    <updated>2017-11-05T14:53:22.786Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center" style="color:hsl(0,60%,50%);">‘未来不迎，当时不杂，既过不恋！’<br>——Front_end</blockquote>

<p><img src="/images/1105.jpg" alt="与君共勉"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:hsl(0,60%,50%);&quot;&gt;‘未来不迎，当时不杂，既过不恋！’&lt;br&gt;——Front_end&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/1105
    
    </summary>
    
      <category term="随笔" scheme="http://niaogege.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://niaogege.site/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题（4）: 知识点汇总</title>
    <link href="http://niaogege.site/2017/10/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%884%EF%BC%89-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://niaogege.site/2017/10/22/前端面试题（4）-知识点汇总/</id>
    <published>2017-10-22T09:10:17.000Z</published>
    <updated>2017-11-05T14:45:03.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center" style="color:hsl(0,60%,50%);">‘每一个不曾起舞的日子都是对生命的一种辜负！’<br>——Front_end</blockquote>

<p>本文摘自seg，感觉总结得知识点很全，所以，就毫无顾忌的搬到自己的博客上，希望对即将参加前端面试的小伙伴有帮助！感谢原作者，版权归原作者所有哦。</p>
<p>如何学前端的？<br>你认为的前端都要做什么样的工作？<br>你理解的前端工程师是什么？<br>你认为前端工程师对于用户和公司有哪些作用？<br>你最近遇到过什么技术挑战？你是如何解决的？<br>项目中遇到的问题是如何解决的？<br>平时都是怎么学习的？<br>实习了多久，在哪实习，实习的工作是什么？<br>实习过程中能不能完成公司给你的工作？工作量如何？<br>…<br>好了，前戏差不多了，现在开始划一下基础知识的重点。</p>
<a id="more"></a>
<p>知识点汇总</p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML5新特性，语义化<br>浏览器的标准模式和怪异模式<br>xhtml和html的区别<br>使用data-的好处<br>meta标签<br>canvas<br>HTML废弃的标签<br>IE6 bug，和一些定位写法<br>css js放置位置和原因<br>什么是渐进式渲染<br>html模板语言<br>meta viewport原理</p>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>盒模型，box-sizing<br>CSS3新特性，伪类，伪元素，锚伪类<br>CSS实现隐藏页面的方式<br>如何实现水平居中和垂直居中。<br>说说position，display<br>请解释*{box-sizing:border-box;}的作用，并说明使用它的好处<br>浮动元素引起的问题和解决办法？绝对定位和相对定位，元素浮动后的display值<br>link和@import引入css的区别<br>解释一下css3的flexbox，以及适用场景<br>inline和inline-block的区别<br>哪些是块级元素那些是行级元素，各有什么特点<br>grid布局<br>table布局的作用<br>实现两栏布局有哪些方法？<br>css dpi<br>你知道attribute和property的区别么<br>css布局问题？css实现三列布局怎么做？如果中间是自适应又怎么做？<br>流式布局如何实现，响应式布局如何实现<br>移动端布局方案<br>实现三栏布局（圣杯布局，双飞翼布局，flex布局）<br>清除浮动的原理<br>overflow:hidden有什么缺点？<br>padding百分比是相对于父级宽度还是自身的宽度<br>css3动画，transition和animation的区别，animation的属性，加速度，重力的模拟实现<br>CSS 3 如何实现旋转图片（transform: rotate）<br>sass less<br>对移动端开发了解多少？（响应式设计、Zepto；@media、viewport、JavaScript 正则表达式判断平台。）<br>什么是bfc，如何创建bfc？解决什么问题？<br>CSS中的长度单位（px,pt,rem,em,ex,vw,vh,vh,vmin,vmax）<br>CSS 选择器的优先级是怎样的？<br>雪碧图<br>svg<br>媒体查询的原理是什么？<br>CSS 的加载是异步的吗？表现在什么地方？<br>常遇到的浏览器兼容性问题有哪些？常用的hack的技巧<br>外边距合并<br>解释一下“::before”和“:after”中的双冒号和单冒号的区别</p>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>js的基本类型有哪些？引用类型有哪些？null和undefined的区别。<br>如何判断一个变量是Array类型？如何判断一个变量是Number类型？（都不止一种）<br>Object是引用类型嘛？引用类型和基本类型有什么区别？哪个是存在堆哪一个是存在栈上面的？<br>JS常见的dom操作api<br>解释一下事件冒泡和事件捕获<br>事件委托（手写例子），事件冒泡和捕获，如何阻止冒泡？如何组织默认事件？<br>对闭包的理解？什么时候构成闭包？闭包的实现方法？闭包的优缺点？<br>this有哪些使用场景？跟C,Java中的this有什么区别？如何改变this的值？<br>call，apply，bind<br>显示原型和隐式原型，手绘原型链，原型链是什么？为什么要有原型链<br>创建对象的多种方式<br>实现继承的多种方式和优缺点<br>new 一个对象具体做了什么<br>手写Ajax，XMLHttpRequest<br>变量提升<br>举例说明一个匿名函数的典型用例<br>指出JS的宿主对象和原生对象的区别，为什么扩展JS内置对象不是好的做法？有哪些内置对象和内置函数？<br>attribute和property的区别<br>document load和document DOMContentLoaded两个事件的区别<br>=== 和 == , [] === [], undefined === undefined,[] == [], undefined == undefined<br>typeof能够得到哪些值<br>什么是“use strict”,好处和坏处<br>函数的作用域是什么？js 的作用域有几种？<br>JS如何实现重载和多态<br>常用的数组api，字符串api<br>原生事件绑定（跨浏览器），dom0和dom2的区别？<br>给定一个元素获取它相对于视图窗口的坐标<br>如何实现图片滚动懒加载<br>js 的字符串类型有哪些方法？ 正则表达式的函数怎么使用？<br>深拷贝<br>编写一个通用的事件监听函数<br>web端cookie的设置和获取<br>setTimeout和promise的执行顺序<br>JavaScript 的事件流模型都有什么？<br>navigator对象，location和history<br>js的垃圾回收机制<br>内存泄漏的原因和场景<br>DOM事件的绑定的几种方式<br>DOM事件中target和currentTarget的区别<br>typeof 和 instanceof 区别，instanceof原理<br>js动画和css3动画比较<br>JavaScript 倒计时（setTimeout）<br>js处理异常<br>js的设计模式知道那些<br>轮播图的实现，以及轮播图组件开发，轮播10000张图片过程<br>websocket的工作原理和机制。<br>手指点击可以触控的屏幕时，是什么事件？<br>什么是函数柯里化？以及说一下JS的API有哪些应用到了函数柯里化的实现？(函数柯里化一些了解，以及在函数式编程的应用，最后说了一下JS中bind函数和数组的reduce方法用到了函数柯里化。)<br>JS代码调试</p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>谈一谈 promise<br>所有的 ES6 特性你都知道吗？如果遇到一个东西不知道是 ES6 还是 ES5, 你该怎么区分它<br>es6的继承和es5的继承有什么区别<br>promise封装ajax<br>let const的优点<br>es6 generator 是什么，async/await 实现原理<br>ES6和node的commonjs模块化规范区别<br>箭头函数，以及它的this<br>计算机网络<br>HTTP协议头含有哪些重要的部分，HTTP状态码<br>网络url输入到输出怎么做？<br>性能优化为什么要减少 HTTP 访问次数？<br>Http请求的过程与原理<br>https（对是https）有几次握手和挥手？https的原理。<br>http有几次挥手和握手？TLS的中文名？TLS在哪一网络层？<br>TCP连接的特点，TCP连接如何保证安全可靠的？<br>为什么TCP连接需要三次握手，两次不可以吗，为什么<br>为什么tcp要三次握手四次挥手？<br>tcp的三次握手和四次挥手画图（当场画写ack 和 seq的值）？<br>tcp与udp的区别<br>get和post的区别？什么情况下用到？<br>http2 与http1 的区别？<br>websocket<br>什么是tcp流，什么是http流<br>babel是如何将es6代码编译成es5的<br>http2的持久连接和管线化<br>域名解析时是tcp还是udp<br>域名发散和域名收敛<br>Post一个file的时候file放在哪的？<br>HTTP Response的Header里面都有些啥？</p>
<h3 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h3><p>跨域，为什么JS会对跨域做出限制<br>前端安全：xss，csrf…<br>浏览器怎么加载页面的？script脚本阻塞有什么解决方法？defer和async的区别？<br>浏览器强缓存和协商缓存<br>浏览器的全局变量有哪些<br>浏览器同一时间能够从一个域名下载多少资源<br>按需加载，不同页面的元素判断标准<br>web存储、cookies、localstroge等的使用和区别<br>浏览器的内核<br>如何实现缓存机制？（从200缓存，到cache到etag再到）<br>说一下200和304的理解和区别<br>什么是预加载、懒加载<br>一个 XMLHttpRequest 实例有多少种状态？<br>dns解析原理，输入网址后如何查找服务器<br>服务器如何知道你？<br>浏览器渲染过程<br>ie的某些兼容性问题<br>session<br>拖拽实现<br>拆解url的各部分</p>
<h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><p>对webpack,gulp，grunt等有没有了解?对比。<br>webpack的入口文件怎么配置，多个入口怎么分割。<br>webpack的loader和plugins的区别<br>gulp的具体使用。<br>前端工程化的理解、如何自己实现一个文件打包，比如一个JS文件里同时又ES5 和ES6写的代码，如何编译兼容他们<br>模块化<br>对AMD,CMD,CommonJS有没有了解?<br>为什么要模块化？不用的时候和用RequireJs的时候代码大概怎么写？<br>说说有哪些模块化的库，有了解过模块化的发展的历史吗？<br>分别说说同步和异步模块化的应用场景，说下AMD异步模块化实现的原理？<br>如何将项目里面的所有的require的模块语法换成import的ES6的语法？<br>使用模块化加载时，模块加载的顺序是怎样的，如果不知道，根据已有的知识，你觉得顺序应该是怎么样的？</p>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>使用过哪些框架？<br>zepto 和 jquery 是什么关系，有什么联系么？<br>jquery源码如何实现选择器的，为什么$取得的对象要设计成数组的形式，这样设计的目的是什么<br>jquery如何绑定事件，有几种类型和区别<br>什么是MVVM，MVC，MVP<br>Vue和Angular的双向数据绑定原理<br>Vue，Angular组件间通信以及路由原理<br>react和vue的生命周期<br>react和vue的虚拟dom以及diff算法<br>vue的observer，watcher，compile<br>react和angular分别用在什么样的业务吗？性能方面和MVC层面上的区别<br>jQuery对象和JS的Element有什么区别<br>jQuery对象是怎么实现的<br>jQuery除了它封装了一些方法外，还有什么值得我们去学习和使用的？<br>jQuery的$(‘xxx’)做了什么事情<br>介绍一下bootstrap的栅格系统是如何实现的</p>
<h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><p>对nodejs有没有了解<br>Express 和 koa 有什么关系，有什么区别？<br>nodejs适合做什么样的业务？<br>nodejs与php，java有什么区别<br>Nodejs中的Stream和Buffer有什么区别？<br>node的异步问题是如何解决的？<br>node是如何实现高并发的？<br>说一下 Nodejs 的 event loop 的原理</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>基本数据结构：（数组、队列、链表、堆、二叉树、哈希表等等）<br>8种排序算法，原理，以及适用场景和复杂度<br>说出越多越好的费波拉切数列的实现方法？<br>性能优化<br>cdn的用法是什么？什么时候用到？<br>浏览器的页面优化？<br>如何优化 DOM 操作的性能<br>单页面应用有什么SEO方案？<br>单页面应用首屏显示比较慢，原因是什么？有什么解决方案？</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>正则表达式<br>前端渲染和后端渲染的优缺点<br>数据库的四大特性，什么是原子性，表的关系<br>你觉得前端体系应该是怎样的？<br>一个静态资源要上线，里面有各种资源依赖，你如何平稳上线<br>如果要你去实现一个前端模板引擎，你会怎么做<br>知道流媒体查询吗？<br>SEO<br>mysql 和 mongoDB 有什么区别？<br>restful的method解释<br>数据库知识、操作系统知识<br>click在ios上有300ms延迟，原因及如何解决<br>移动端的适配，rem+媒体查询/meta头设置<br>移动端的手势和事件；<br>unicode，utf8，gbk编码的了解，乱码的解决</p>
<h3 id="三面、四面常问的开放性问题"><a href="#三面、四面常问的开放性问题" class="headerlink" title="三面、四面常问的开放性问题"></a>三面、四面常问的开放性问题</h3><p>你都看过什么书？最近在看什么书？<br>用过什么框架？有没有看过什么框架的代码？<br>有没有学过设计模式？<br>说一说观察者模式吧！能不能写出来？<br>你最大的优点是什么？那你最大的缺点呢？<br>你大学期间做过最疯狂的事情是什么？<br>你除了写博客还有什么输出？<br>现在你的领导给你了一份工作，要求你一个星期完成，但你看了需求以后估计需要3周才能完成，你该怎么办？<br>平时关注的前端技术<br>如何规划自己的职业生涯<br>项目过程中，有遇到什么问题吗？怎么解决的？<br>最近在研究哪方面的东西？<br>请介绍一项你最热爱、最擅长的专业领域，并且介绍的学习规划。<br>请介绍你参与的印象最深刻的一个项目，为什么？并且介绍你在项目中的角色和发挥的作用。</p>
<h3 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h3><p>你为什么要学习前端？<br>你平时的是怎么学习前端的？有什么输出？<br>你觉得自己最好的项目是什么？<br>身边比较佩服的人有什么值得你学习的？你为什么没有跟他们一样？<br>同事的什么问题会让你接受不了<br>压力最大的事情是什么？<br>和同学做过的最好的项目？<br>身边的朋友通常对你的评价是什么<br>喜欢什么样的工作氛围<br>如何看待加班<br>有没有对象<br>意向城市<br>其他的offer<br>为什么要录取你？<br>大学里花费时间最多的三件事情<br>周末都会干什么？<br>未来职业规划</p>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>面试的时候不要表现出自己想创业。敲黑板。<br>从来没有看过源码的话，建议从jQuery，zepto这之类的源码入手，后期可以了解Vue，React常见的功能的源码思路和实现。<br>项目经验描述的时候不用太太太详细，拣重点的讲。（因为我就一直说一直说，最后面试官评价插不上话评价减分。）</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>好好努力，注意平时多多总结，很多东西平时工作可能用到了但你就是讲不出原理，这时候怎么办？就只能硬着头皮多想，这时候也正好是你能力提升的时候了！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:hsl(0,60%,50%);&quot;&gt;‘每一个不曾起舞的日子都是对生命的一种辜负！’&lt;br&gt;——Front_end&lt;/blockquote&gt;

&lt;p&gt;本文摘自seg，感觉总结得知识点很全，所以，就毫无顾忌的搬到自己的博客上，希望对即将参加前端面试的小伙伴有帮助！感谢原作者，版权归原作者所有哦。&lt;/p&gt;
&lt;p&gt;如何学前端的？&lt;br&gt;你认为的前端都要做什么样的工作？&lt;br&gt;你理解的前端工程师是什么？&lt;br&gt;你认为前端工程师对于用户和公司有哪些作用？&lt;br&gt;你最近遇到过什么技术挑战？你是如何解决的？&lt;br&gt;项目中遇到的问题是如何解决的？&lt;br&gt;平时都是怎么学习的？&lt;br&gt;实习了多久，在哪实习，实习的工作是什么？&lt;br&gt;实习过程中能不能完成公司给你的工作？工作量如何？&lt;br&gt;…&lt;br&gt;好了，前戏差不多了，现在开始划一下基础知识的重点。&lt;/p&gt;
    
    </summary>
    
      <category term="前端面试题" scheme="http://niaogege.site/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="前端面试题" scheme="http://niaogege.site/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Webpack学习笔记之性能优化</title>
    <link href="http://niaogege.site/2017/10/14/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://niaogege.site/2017/10/14/webpack学习笔记性能优化/</id>
    <published>2017-10-14T14:18:08.000Z</published>
    <updated>2017-10-15T06:50:01.292Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center" style="color:#2d9fb3;">当你的才华还撑不你的野心时，那你应该静下心来学习！<br>——鸟哥哥</blockquote></p>
<p style="text-indent:20px;">最近一周，经历的事情有点多，副主管离职了，甚是忐忑，后盾一个个离我而去，而后的问题只能靠自己搞定了。还记得公主（副主管）在职的时候总是搞笑说，‘有问题啊，重启电脑就好了，不行，再重启，呵呵呵’，很幽默很有活力的一位可爱程序员。从他身上还是能学到很多东西，虽然他是后端我是前端，他解决问题的方式比我多，动手能力也很强，关键是他喜欢思考问题，这样做的后果是什么，考虑得比我周全，很佩服！</p><br><p style="text-indent:20px;">这周的工作还是<a href="https://github.com/niaogege/cnc""" target="_blank" rel="external">cnc</a>,主要做的两件事：1.项目所需依赖升级，最主要的是webpack1.3升级到最新版webpack3.6.1,当然还有vue-loader升级到13.0等等 2.vue组件懒加载，其他的都是优化代码，小修小补的，记得比较深的知识点就是关于js属性的可枚举属性和不可枚举属性，后面也要写一篇博客记录一下历程。今天这篇博客，主要是记录自己学习webpack过程，有一部分是整合前辈总结过的方法。我觉得这种比较偏业务的代码，最后的形式就是结合实例，很有说服力，且最好上图，图文并茂最好了。<br></p><p style="text-indent:20px;">目前亟待解决的知识点疑惑：1.正则表达式 RegExp;2.This/call/apply/bind模糊;3.prototype原型属性，进入正文…</p>

<a id="more"></a>
<p>项目刚开始跑的时候,run build之后，app.hash.js达到2M多，oh,WTF，那还玩个毛豆，正常访问肯定会有问题，特别是第一次访问，没有缓存的情况下，超慢的。为此，还出现app.hash.js因为文件太大，加之网站访问速度慢，文件被截取了，导致报错。为了干掉这个bug,只好去看看官方vue-cli和webpack,看看哪些地方能优化的。极力推荐<a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/" target="_blank" rel="external">杨少侠的博文</a>,总结得很到位!大神！！</p>
<h3 id="按需加载模块"><a href="#按需加载模块" class="headerlink" title="按需加载模块"></a>按需加载模块</h3><p>在vue官网<a href="https://router.vuejs.org/zh-cn/advanced/lazy-loading.html" target="_blank" rel="external">路由懒加载</a>这块，讲得很明白：</p>
<blockquote>
<p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。结合 Vue 的异步组件和 Webpack 的代码分割(coding splitting)功能，轻松实现路由组件的懒加载。</p>
</blockquote>
<p>webpack(2.0以上) 也是内置对这方面的支持； 假如，你使用的是 Vue，将一个组件（以及其所有依赖）改为异步加载，所需要的只是把：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import ASIDE from  &apos;components/common/xzAside&apos;</div></pre></td></tr></table></figure></p>
<p>改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const ASIDE = () =&gt; import(/* webpackChunkName: &quot;xzAside&quot; */&apos;components/common/xzAside&apos;)</div></pre></td></tr></table></figure></p>
<p>同时配合webpack.base.conf.js中的entry，把每个组件加载的名称标注好，<code>chunkFilename: ‘[name].chunk.js’,</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    path: config.build.assetsRoot,</div><div class="line">    publicPath: process.env.NODE_ENV === &apos;production&apos; ? config.build.assetsPublicPath : config.dev.assetsPublicPath,</div><div class="line">    filename: &apos;[name].js&apos;,</div><div class="line">    // add chunk name. We can use lazy loading Component by import syntax</div><div class="line">    chunkFilename: &apos;[name].chunk.js&apos;,</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<p>最后的效果就是代码被分割成一块块的，而且对各个组件的大小一目了然。其中有一点需要注意，vue-loader超过13.0的版本不支持require方式引入js,作为采坑者，郁闷了一上午！！</p>
<h3 id="Webpack3-新功能-Scope-Hoisting"><a href="#Webpack3-新功能-Scope-Hoisting" class="headerlink" title="Webpack3 新功能: Scope Hoisting"></a>Webpack3 新功能: Scope Hoisting</h3><p>本人在项目中实践过，效果感觉不明显，可能还需要其他的配置参数，Webpack在 3.0 版本，提供了一个新的功能：Scope Hoisting，又译作“作用域提升”。只需在配置文件中添加一个新的插件，就可以让 Webpack 打包出来的代码文件更小、运行的更快：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  plugins: [</div><div class="line">    new webpack.optimize.ModuleConcatenationPlugin()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="引入-DllPlugin-和-DllReferencePlugin"><a href="#引入-DllPlugin-和-DllReferencePlugin" class="headerlink" title="引入 DllPlugin 和 DllReferencePlugin"></a>引入 DllPlugin 和 DllReferencePlugin</h3><p> 提供了以大幅度提高构建时间性能的方式拆分软件包的方法。其中原理是，将特定的第三方NPM包模块提前构建，然后通过页面引入。这不仅能够使得 vendor 文件可以大幅度减小，同时，也极大的提高了构件速度。鉴于篇幅，具体用法可参见<a href="https://github.com/nicejade/vue-boilerplate-template/" target="_blank" rel="external">DLLPlugin配置</a></p>
<h3 id="合理配置-CommonsChunkPlugin"><a href="#合理配置-CommonsChunkPlugin" class="headerlink" title="合理配置 CommonsChunkPlugin"></a>合理配置 CommonsChunkPlugin</h3><p>推荐webpack-bundle-analyzer —— Webpack 插件和 CLI 实用程序，她可以将内容束展示为方便交互的直观树状图，让你明白你所构建包中真正引入的内容。<br>webpack的资源入口通常是以entry为单元进行编译提取，那么当多entry共存的时候，CommonsChunkPlugin的作用就会发挥出来，对所有依赖的chunk进行公共部分的提取，但是在这里可能很多人会误认为抽取公共部分指的是能抽取某个代码片段，其实并非如此，它是以module为单位进行提取。</p>
<p>假设我们的页面中存在entry1，entry2，entry3三个入口，这些入口中可能都会引用如utils，loadash，fetch等这些通用模块，那么就可以考虑对这部分的共用部分机提取。通常提取方式有如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//有选择的提取公共代码</div><div class="line">new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;,[&apos;entry1&apos;,&apos;entry2&apos;]);</div><div class="line">只提取entry1节点和entry2中的共用部分模块, 生成一个common.js</div><div class="line"></div><div class="line">//将entry下所有的模块的公共部分（可指定引用次数）提取到一个通用的chunk中</div><div class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    name: &apos;vendors&apos;,</div><div class="line">    minChunks: function (module, count) &#123;</div><div class="line">       return (</div><div class="line">          module.resource &amp;&amp;</div><div class="line">          /\.js$/.test(module.resource) &amp;&amp;</div><div class="line">          module.resource.indexOf(</div><div class="line">            path.join(__dirname, &apos;../node_modules&apos;)</div><div class="line">          ) === 0</div><div class="line">       )</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">提取所有node_modules中的模块至vendors中，也可以指定minChunks中的最小引用数；</div><div class="line"></div><div class="line">//抽取enry中的一些lib抽取到vendors中</div><div class="line">entry = &#123;</div><div class="line">    vendors: [&apos;fetch&apos;, &apos;loadash&apos;]</div><div class="line">&#125;;</div><div class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    name: &quot;vendors&quot;,</div><div class="line">    minChunks: Infinity</div><div class="line">&#125;);</div><div class="line">添加一个entry名叫为vendors，并把vendors设置为所需要的资源库，CommonsChunk会自动提取指定库至vendors中。</div></pre></td></tr></table></figure></p>
<h3 id="其他野路子"><a href="#其他野路子" class="headerlink" title="其他野路子"></a>其他野路子</h3><h4 id="开启productionGzip：true"><a href="#开启productionGzip：true" class="headerlink" title="开启productionGzip：true"></a>开启productionGzip：true</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Gzip off by default as many popular static hosts such as</div><div class="line">// Surge or Netlify already gzip all static assets for you.</div><div class="line">// Before setting to `true`, make sure to:</div><div class="line">// npm install --save-dev compression-webpack-plugin</div><div class="line">productionGzip: false,</div><div class="line">productionGzipExtensions: [&apos;js&apos;, &apos;css&apos;],</div></pre></td></tr></table></figure>
<p>如果是nginx已经开启了gzip压缩的话，这可也可以开启，只需<code>gzip_static:on</code>,不过这个需要Nginx支持这个配置项：-with-http_gzip_static_module这个模块，实在不行，nginx服务器直接开启gzip压缩，大约能压缩三分之一，哇，不错！</p>
<h4 id="devtool-‘cheap-module-source-map’"><a href="#devtool-‘cheap-module-source-map’" class="headerlink" title="devtool: ‘cheap-module-source-map’"></a>devtool: ‘cheap-module-source-map’</h4><p>生产环境调试工具用的，官方推荐是’#source-map’，其实你在开发环境如果自信的话可以不用，主要的作用就是报错的代码能看到在哪行那列</p>
<h4 id="uglify丑化你的代码"><a href="#uglify丑化你的代码" class="headerlink" title="uglify丑化你的代码"></a>uglify丑化你的代码</h4><p>使用配置也非常简单，只需要将我们原来webpack中自带的uglifyPlugin配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">   exclude:/\.min\.js$/</div><div class="line">   mangle:true,</div><div class="line">   compress: &#123; warnings: false &#125;,</div><div class="line">   output: &#123; comments: false &#125;</div><div class="line">&#125;)</div><div class="line">修改成如下代码即可：</div><div class="line"></div><div class="line">const os = require(&apos;os&apos;);</div><div class="line">    const UglifyJsParallelPlugin = require(&apos;webpack-uglify-parallel&apos;);</div><div class="line"></div><div class="line">    new UglifyJsParallelPlugin(&#123;</div><div class="line">      workers: os.cpus().length,</div><div class="line">      mangle: true,</div><div class="line">      compressor: &#123;</div><div class="line">        warnings: false,</div><div class="line">        drop_console: true,</div><div class="line">        drop_debugger: true</div><div class="line">       &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h4 id="谷歌官方自带的cli配置"><a href="#谷歌官方自带的cli配置" class="headerlink" title="谷歌官方自带的cli配置"></a>谷歌官方自带的cli配置</h4><p> 由于使用官方推荐的vue-cli所以，webpack里的配置已经是帮你配好了，不过，自己也要知道这些插件分别对应什么作用，如何更改参数配置等</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:#2d9fb3;&quot;&gt;当你的才华还撑不你的野心时，那你应该静下心来学习！&lt;br&gt;——鸟哥哥&lt;/blockquote&gt;&lt;/p&gt;
&lt;p style=&quot;text-indent:20px;&quot;&gt;最近一周，经历的事情有点多，副主管离职了，甚是忐忑，后盾一个个离我而去，而后的问题只能靠自己搞定了。还记得公主（副主管）在职的时候总是搞笑说，‘有问题啊，重启电脑就好了，不行，再重启，呵呵呵’，很幽默很有活力的一位可爱程序员。从他身上还是能学到很多东西，虽然他是后端我是前端，他解决问题的方式比我多，动手能力也很强，关键是他喜欢思考问题，这样做的后果是什么，考虑得比我周全，很佩服！&lt;/p&gt;&lt;br&gt;&lt;p style=&quot;text-indent:20px;&quot;&gt;这周的工作还是&lt;a href=https://github.com/niaogege/cnc&quot;&quot;&gt;cnc&lt;/a&gt;,主要做的两件事：1.项目所需依赖升级，最主要的是webpack1.3升级到最新版webpack3.6.1,当然还有vue-loader升级到13.0等等 2.vue组件懒加载，其他的都是优化代码，小修小补的，记得比较深的知识点就是关于js属性的可枚举属性和不可枚举属性，后面也要写一篇博客记录一下历程。今天这篇博客，主要是记录自己学习webpack过程，有一部分是整合前辈总结过的方法。我觉得这种比较偏业务的代码，最后的形式就是结合实例，很有说服力，且最好上图，图文并茂最好了。&lt;br&gt;&lt;p style=&quot;text-indent:20px;&quot;&gt;目前亟待解决的知识点疑惑：1.正则表达式 RegExp;2.This/call/apply/bind模糊;3.prototype原型属性，进入正文…&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://niaogege.site/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://niaogege.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0项目总结(前端)</title>
    <link href="http://niaogege.site/2017/10/03/Vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E5%89%8D%E7%AB%AF/"/>
    <id>http://niaogege.site/2017/10/03/Vue项目总结-前端/</id>
    <published>2017-10-03T09:27:00.000Z</published>
    <updated>2017-10-05T15:35:41.714Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center" style="color:#2d9fb3;">看到朋友圈里要么是风景要么是美食，我就知道我离他们不远了<br>——鸟哥哥</blockquote></p>
<p style="text-indent:20px">前前后后大约一个多月的时间，中间几经波折，几经修改原型，也曾想过认怂，好在凭借自己坚韧的毅力和默默地坚持，终于算是完成了项目一稿（前期掉了好几斤肉…）。现在趁着国庆期间，好好总结中间踩过的坑。据说国庆之后的第四季度是公司最忙的时候，估计以后又要每天加班，与代码为伴了，有点可怜的feel。(加班没关系，身体最重要！虽然很年轻，但我也不能过度的耗损自己的身体。)<br><br>说重点，本项目是一个小型的关于文档操作的系统，技术栈主要采用<code style="background:#2d9fb3;color:white;">Vue2.0+Vuex+vue-router+ES6+vue-resource</code>。为什么选择了vue作为前端框架?一是可维护性，技术学习曲线，二是项目本身很小，采用ng这种重量级框架有点大材小用。最终选择Vue还是很感激涛哥（谢谢大神，后面在好好感激一番）</p>

<a id="more"></a>
<h3 id="Vue基础使用"><a href="#Vue基础使用" class="headerlink" title="Vue基础使用"></a>Vue基础使用</h3><h4 id="components"><a href="#components" class="headerlink" title="components"></a>components</h4><p>在 Vue 中，父子组件的关系可以总结为<code style="background:#2d9fb3;color:white;"> props down, events up</code>。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。看看它们是怎么工作的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#### parent component父组件：引用子组件，向子组件传递数据</div><div class="line">&lt;mine-search</div><div class="line">  :searchClick=&quot;searchClick&quot;</div><div class="line">  :myMessage=&quot;parentMsg&quot;</div><div class="line">  :isDisplayBtnGroup = &apos;isDisplayBtnGroup&apos;</div><div class="line">  @displayList=&quot;fileFolderFn&quot;</div><div class="line">  @getListFn=&quot;getListFn&quot;</div><div class="line">  &gt;</div><div class="line">&lt;/mine-search&gt;</div><div class="line">#### child component 子组件</div><div class="line">export default &#123;</div><div class="line">  data()&#123;&#125;,</div><div class="line">  props:[&apos;myMessage&apos;,&apos;isDisplayBtnGroup&apos;],</div><div class="line">  methods:&#123;</div><div class="line">    addFolderChild ()&#123;</div><div class="line">      this.$emit(&apos;addFolderParent&apos;)</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们知道，父组件是使用 props 传递数据给子组件，但子组件怎么跟父组件通信呢？这个时候 Vue 的自定义事件系统就派得上用场了。<br>使用 $on(eventName) 监听事件;使用 $emit(eventName) 触发事件</p>
</blockquote>
<h4 id="slot-vue官网"><a href="#slot-vue官网" class="headerlink" title="slot (vue官网)"></a>slot (vue官网)</h4><p>为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发 (或“transclusion”如果你熟悉 Angular)</p>
<h5 id="单个插槽-slot"><a href="#单个插槽-slot" class="headerlink" title="单个插槽 slot"></a>单个插槽 slot</h5><h5 id="具名插槽-元素可以用一个特殊的属性-name-来配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应-slot-特性的元素。"><a href="#具名插槽-元素可以用一个特殊的属性-name-来配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应-slot-特性的元素。" class="headerlink" title="具名插槽  元素可以用一个特殊的属性 name 来配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 slot 特性的元素。"></a>具名插槽 <slot> 元素可以用一个特殊的属性 name 来配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 slot 特性的元素。</slot></h5><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>作用域插槽是一种特殊类型的插槽，用作一个替换已渲染元素的 (能被传递数据的) 可重用模板。<br>作用域插槽更具代表性的用例是列表组件，允许组件自定义应该如何渲染列表每一项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#### parent 父组件：</div><div class="line">&lt;my-awesome-list :items=&quot;items&quot;&gt;</div><div class="line">  &lt;!-- 作用域插槽也可以是具名的 --&gt;</div><div class="line">  &lt;template slot=&quot;item&quot; scope=&quot;props&quot;&gt;</div><div class="line">    &lt;li class=&quot;my-fancy-item&quot;&gt;&#123;&#123; props.text &#125;&#125;&lt;/li&gt;</div><div class="line">  &lt;/template&gt;</div><div class="line">&lt;/my-awesome-list&gt;</div><div class="line">#### 子组件：</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;slot name=&quot;item&quot;</div><div class="line">    v-for=&quot;item in items&quot;</div><div class="line">    :text=&quot;item.text&quot;&gt;</div><div class="line">    &lt;!-- 这里写入备用内容 --&gt;</div><div class="line">  &lt;/slot&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h4 id="this-set"><a href="#this-set" class="headerlink" title="this.$set()"></a>this.$set()</h4><p>Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  data:&#123;</div><div class="line">  a:1</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">// `vm.a` 是响应的</div><div class="line">vm.b = 2</div><div class="line">// `vm.b` 是非响应的</div></pre></td></tr></table></figure></p>
<p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性 (root-level reactive property)。然而它可以使用<code style="background:#2d9fb3;color:white;"> Vue.set(object, key, value)</code> 方法将响应属性添加到嵌套的对象上：</p>
<pre>Vue.set(vm.someObject, 'b', 2)</pre>或者
<pre>this.$set(this.objectA,'b',2)</pre>

<h4 id="watch-computed"><a href="#watch-computed" class="headerlink" title="watch/computed"></a>watch/computed</h4><h5 id="computed-这就是对于任何复杂逻辑，你都应当使用计算属性的原因"><a href="#computed-这就是对于任何复杂逻辑，你都应当使用计算属性的原因" class="headerlink" title="computed:这就是对于任何复杂逻辑，你都应当使用计算属性的原因"></a>computed:这就是对于任何复杂逻辑，你都应当使用计算属性的原因</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">   // a computed getter</div><div class="line">   reversedMessage: function () &#123;</div><div class="line">     // `this` points to the vm instance</div><div class="line">     return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="computed-Vs-methods"><a href="#computed-Vs-methods" class="headerlink" title="computed Vs methods"></a>computed Vs methods</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;&lt;/p&gt;</div><div class="line"></div><div class="line">// in component</div><div class="line">methods: &#123;</div><div class="line">  reversedMessage: function () &#123;</div><div class="line">    return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值,相比之下，每当触发重新渲染时，方法的调用方式将总是再次执行函数。</p>
<h5 id="computed-VS-watch"><a href="#computed-VS-watch" class="headerlink" title="computed VS watch"></a>computed VS watch</h5><p>Vue确实提供了一种更通用的方式来观察和响应Vue实例上的数据变动：watch属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch——特别是如果你之前使用过 AngularJS。然而，通常更好的想法是使用计算属性而不是命令式的 watch 回调。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">   firstName: function (val) &#123;</div><div class="line">     this.fullName = val + &apos; &apos; + this.lastName</div><div class="line">   &#125;,</div><div class="line">   lastName: function (val) &#123;</div><div class="line">     this.fullName = this.firstName + &apos; &apos; + val</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> ##### 通常更好的想法是使用计算属性而不是命令式的 watch 回调</div><div class="line"> computed: &#123;</div><div class="line">   fullName: function () &#123;</div><div class="line">     return this.firstName + &apos; &apos; + this.lastName</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="watch观察者"><a href="#watch观察者" class="headerlink" title="watch观察者"></a>watch观察者</h5><p>当你想要在数据变化响应时，执行异步操作或开销较大的操作，这是很有用的，比如在用到vuex状态管理器时，从state返回的mapGetters属性当中，检测其变化，用到watch是很好的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">copmuted:&#123;</div><div class="line">  ...mapGetters(</div><div class="line">    &apos;question&apos;:question</div><div class="line">    )</div><div class="line">&#125;</div><div class="line">watch: &#123;</div><div class="line">   // 如果 question 发生改变，这个函数就会运行</div><div class="line">   question: function (newQuestion) &#123;</div><div class="line">     this.answer = &apos;Waiting for you to stop typing...&apos;</div><div class="line">     this.getAnswer()</div><div class="line">   &#125;</div><div class="line"> &#125;,</div><div class="line"> methods: &#123; // _.debounce 是一个通过 lodash 限制操作频率的函数。</div><div class="line">   getAnswer: _.debounce(</div><div class="line">     function () &#123;</div><div class="line">       this.answer = &apos;Thinking...&apos;</div><div class="line">       var vm = this</div><div class="line">       axios.get(&apos;https://yesno.wtf/api&apos;)</div><div class="line">         .then(function (response) &#123;</div><div class="line">           vm.answer = _.capitalize(response.data.answer)</div><div class="line">         &#125;)</div><div class="line">         .catch(function (error) &#123;&#125;)</div><div class="line">     &#125;,</div><div class="line">     // 这是我们为用户停止输入等待的毫秒数</div><div class="line">     500</div><div class="line">   )</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="life-cycle-生命周期函数"><a href="#life-cycle-生命周期函数" class="headerlink" title="life-cycle(生命周期函数)"></a>life-cycle(生命周期函数)</h4><p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。<br>在Vue的整个生命周期中，它提供了一些生命周期钩子，给了我们执行自定义逻辑的机会。<br>一般用的比较多的是：</p>
<h5 id="created"><a href="#created" class="headerlink" title="created"></a>created</h5><p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算，watch/event事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。初始化方法可以在这个阶段执行</p>
<h5 id="beforeUpdate-update"><a href="#beforeUpdate-update" class="headerlink" title="beforeUpdate/update"></a>beforeUpdate/update</h5><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁</p>
<h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。(只会运行一次)<br>注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用<code style="background:#2d9fb3;color:white;"> vm.$nextTick </code>替换掉 mounted：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mounted: function () &#123;</div><div class="line">  this.$nextTick(function () &#123;</div><div class="line">    // Code that will run only after the</div><div class="line">    // entire view has been rendered</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Vuex-状态管理器"><a href="#Vuex-状态管理器" class="headerlink" title="Vuex(状态管理器)"></a>Vuex(状态管理器)</h3><p><img src="/images/vuex.png"></p>
<h4 id="Vue-Components："><a href="#Vue-Components：" class="headerlink" title="Vue Components："></a>Vue Components：</h4><p>Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。</p>
<h4 id="dispatch："><a href="#dispatch：" class="headerlink" title="dispatch："></a>dispatch：</h4><p>操作行为触发方法，是唯一能执行action的方法。在组件中定义dispatch()</p>
<h4 id="actions："><a href="#actions：" class="headerlink" title="actions："></a>actions：</h4><p>操作行为处理模块。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。</p>
<h4 id="commit："><a href="#commit：" class="headerlink" title="commit："></a>commit：</h4><p>状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。</p>
<h4 id="mutations："><a href="#mutations：" class="headerlink" title="mutations："></a>mutations：</h4><p>状态改变操作方法。是Vuex修改state的唯一推荐方法，其他修改方式在严格模式下将会报错。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。</p>
<ul>
<li><p>Mutation 需遵守 Vue 的响应规则:<br><code>.</code>最好提前在你的 store 中初始化好所有所需属性。2当需要在对象上添加新属性时，你应该使用 Vue.set(obj, ‘newProp’, 123), 或者以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：<br>state.obj = { …state.obj, newProp: 123</p>
</li>
<li><p>在组件中提交 Mutation</p>
</li>
</ul>
<p>你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用<code style="background:#2d9fb3;color:white;"> mapMutations</code> 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import &#123; mapMutations &#125; from &apos;vuex&apos;</div><div class="line">export default &#123;</div><div class="line">  // ...</div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations([</div><div class="line">      &apos;increment&apos;, // 将 `this.increment()` 映射为 `this.$store.commit(&apos;increment&apos;)`</div><div class="line">      // `mapMutations` 也支持载荷：</div><div class="line">      &apos;incrementBy&apos; // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&apos;incrementBy&apos;, amount)`</div><div class="line">    ])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="state："><a href="#state：" class="headerlink" title="state："></a>state：</h4><p>页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。(我们又滥用<code style="background:#2d9fb3;color:white;">state</code>)</p>
<h4 id="getters："><a href="#getters：" class="headerlink" title="getters："></a>getters：</h4><p>state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。</p>
<blockquote>
<p>通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。这就是 Vuex 背后的基本思想，借鉴了 Flux、Redux、和 The Elm Architecture。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</p>
</blockquote>
<hr>
<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。<br>个人感觉vue-router做的还是蛮细心的，你项目需要的各种关于路由层面的需求，vue-router基本都能满足!!</p>
<h4 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h4><p>一个『路径参数』使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 <code style="background:#2d9fb3;color:white;">this.$route.params</code>，可以在每个组件内使用。于是，我们可以更新 User 的模板，输出当前用户的 ID：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;router-link :to=&quot;&#123;name:&apos;通知详情&apos;,query:&#123;id:item.id,mark:&apos;mess&apos;&#125;&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/router-link&gt;</div><div class="line">&lt;span class=&quot;notice_time&quot;&gt;&#123;&#123;item.created_at&#125;&#125;&lt;/span&gt;</div><div class="line">//js:</div><div class="line">    this.params = &#123;</div><div class="line">        id:this.$route.query.id,</div><div class="line">        mark:&apos;mess&apos;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="动态修改-document-title"><a href="#动态修改-document-title" class="headerlink" title="动态修改 document title"></a>动态修改 document title</h4><p>全局钩子:使用 <code style="background:#2d9fb3;color:white;">router.beforeEach</code> 注册一个全局的 before 钩子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">router.beforeEach((to,from,next) =&gt; &#123;</div><div class="line">      document.title =  DEFINE.LEFTROUTEINFO.data.title+&apos;_&apos;+to.meta.title     //页面标题</div><div class="line">        if(to.matched.some( item =&gt; item.meta.requiresAuth))&#123;    //对权限进行验证</div><div class="line">          //对路由进行验证</div><div class="line">            if(localStorage.getItem(&apos;auth&apos;))&#123;</div><div class="line">              next()</div><div class="line">            &#125;else&#123;</div><div class="line">              next(&#123;path:&apos;/login&apos; &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;else&#123;</div><div class="line">          next()</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h4 id="动态修改路由名称"><a href="#动态修改路由名称" class="headerlink" title="动态修改路由名称"></a>动态修改路由名称</h4><p>只需在公共组件中watch监测 this.$router的变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">watch:&#123;</div><div class="line">  //实时监测路由变化，显示当前名称</div><div class="line">  &apos;$route&apos;:function(val,oldval)&#123;</div><div class="line">    this.titleLEFT = val.name</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// For single component, we can use the AMD shorthand</div><div class="line">// require([&apos;dep&apos;], dep =&gt; &#123; ... &#125;)</div><div class="line">const Foo = resolve =&gt; require([&apos;./Foo.vue&apos;], resolve)</div><div class="line">// If using Webpack 2, you can also do:</div><div class="line">// const Foo = () =&gt; System.import(&apos;./Foo.vue&apos;)</div></pre></td></tr></table></figure></p>
<p> 把组件按组分块</p>
<p>有时候我们想把某个路由下的所有组件都打包在同个异步块(chunk)中。只需要使用 命名 chunk,一个特殊的注释语法来提供chunk name(需要webpack &gt; 2.4)(看来我的这个项目必须升级到2.4以上的版本了)<br>const Foo = () =&gt; import(/<em> webpackChunkName: “group-foo” </em>/ ‘./Foo.vue’)<br>webpack 会将任何一个异步模块与相同的块名称组合到相同的异步块中。</p>
<h4 id="前端登录拦截和响应"><a href="#前端登录拦截和响应" class="headerlink" title="前端登录拦截和响应"></a>前端登录拦截和响应</h4><p>这一块用到的知识挺多的，俺现在只能是略知一二；<br>1.全局钩子<br>你可以使用 router.beforeEach 注册一个全局的 before 钩子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123; ... &#125;)</div><div class="line">router.beforeEach((to, from, next) =&gt; &#123;</div><div class="line">  // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中。<br>每个钩子方法接收三个参数：<br>to: Route: 即将要进入的目标 路由对象<br>from: Route: 当前导航正要离开的路由<br>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。<br>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。<br>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到from路由对应的地址。</p>
<p>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。<br>确保要调用 next 方法，否则钩子就不会被 resolved。</p>
<p>2.因为现在的登录存放在cookie中，不用手动添加到localStorage或者sessionStorage。但如果假设一种场景，cookie失效或者手动去掉cookie的话，现在你看到的样子就是已经登录过了，但是没有任何数据，用户也不知道这是什么情况，还以为程序出错了呢，我们开发人员会看network，原来是需要登录，这时候需要用到前端对于所以的响应进行拦截,这个单词应该是<code style="background:#2d9fb3;color:white;">Interceptors（劫持）</code>，响应劫持和请求拦截。<br>我们的解决方案是前后端商量好，在header字段加一个标志，然后前端根据这个字段是否是某一个值来判断当前是否登录，同时如果是cookier失效需要重新登录，这之后还要干掉登录来的权限，不然会跳进死循环的，完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Vue.http.interceptors.push(function(request, next)&#123;</div><div class="line">          next(function(res)&#123;</div><div class="line">           let TOKEN = res.headers.map.token</div><div class="line">           if(TOKEN == &apos;ISLOGIN&apos;)&#123;</div><div class="line">               localStorage.removeItem(&apos;auth&apos;)</div><div class="line">               localStorage.removeItem(&quot;truename&quot;)</div><div class="line">               localStorage.removeItem(&quot;role_name&quot;)</div><div class="line">               router.push(&#123;path:&apos;/login&apos;&#125;)</div><div class="line">           &#125;</div><div class="line">         &#125;)</div><div class="line"> &#125;)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>es6博大精深，我感觉自己只是会一点基础用法，深层次的东西还很欠缺，所以，有事没事的话还得多看官方文档和实战。</p>
<h4 id="const-let-var"><a href="#const-let-var" class="headerlink" title="const/let/var"></a>const/let/var</h4><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><p>1.let用来声明变量，只在let命令所在的代码块有效,即在{}内;<br>2.for循环中，如果使用let，声明的变量仅在块级作用域内有效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 6</div></pre></td></tr></table></figure></p>
<p>3.使用let 不存在变量提升，let声明的变量一定要在声明后使用，否则报错。<br>4.“暂时性死区”（temporal dead zone，简称 TDZ）,在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">  // TDZ开始</div><div class="line">  tmp = &apos;abc&apos;; // ReferenceError</div><div class="line">  console.log(tmp); // ReferenceError</div><div class="line">  let tmp; // TDZ结束</div><div class="line">  console.log(tmp); // undefined</div><div class="line">  tmp = 123;</div><div class="line">  console.log(tmp); // 123</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5.不允许重复声明变量，在相同作用域内</p>
<h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>1.声明常量，一旦声明就不能改变，const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br>2.const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>3.const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。<br>4.const保证的不是变量的值不动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。（<a href="http://es6.ruanyifeng.com/#docs/let#const-命令" target="_blank" rel="external">摘自阮一峰的ES6入门</a>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const foo = &#123;&#125;;</div><div class="line">// 为 foo 添加一个属性，可以成功</div><div class="line">foo.prop = 123;</div><div class="line">foo.prop // 123</div><div class="line">// 将 foo 指向另一个对象，就会报错</div></pre></td></tr></table></figure></p>
<p>上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p>
<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><h5 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h5><p>ES6 规定，Promise对象是一个构造函数，用来生成Promise实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  // ... some code</div><div class="line">  if (/* 异步操作成功 */)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; else &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code style="background:#2d9fb3;color:white;">resolve和reject</code><br>resolve的作用是Promise对象的状态从pending 变成 resolved，即从‘未完成’变为‘成功’，在异步操作成功时调用，并将异步操作的结果作为参数传递出去。<br>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
<p>vue2项目中在vuex中获取后端数据的时候，即在action中可以这么用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const url = getUri(&apos;laji&apos;, &apos;file&apos;)</div><div class="line">let myFirstPromise = new Promise(function(resolve,reject)&#123;</div><div class="line">  const resp = Vue.http.get(url,&#123;params:param&#125;);</div><div class="line">  resolve(resp);</div><div class="line">  reject(new Error(`请求错误`))</div><div class="line">&#125;);</div><div class="line">myFirstPromise.then( json =&gt; &#123;</div><div class="line">    commit(types.REQUEST_END,&apos;file&apos;)</div><div class="line">    const data = json.data</div><div class="line">    commit(types.INITIAL_DATA_PUBLIC, &#123; data &#125;)</div><div class="line">&#125;).</div><div class="line">catch( error =&gt; console.warn(error))</div></pre></td></tr></table></figure></p>
<p>这段代码与下面的用法结果是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const url = getUri(&apos;laji&apos;, &apos;file&apos;)</div><div class="line">Vue.http.get(url,&#123;params:param&#125;)</div><div class="line">.then( json =&gt; &#123;</div><div class="line">    commit(types.REQUEST_END,&apos;file&apos;)</div><div class="line">    const data = json.data</div><div class="line">    commit(types.INITIAL_DATA_PUBLIC, &#123; data &#125;)</div><div class="line">&#125;).</div><div class="line">catch( error =&gt; console.warn(error))</div></pre></td></tr></table></figure></p>
<p>下面是一个用Promise对象实现的 Ajax 操作的例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var getJSON = function(url) &#123;</div><div class="line">  var promise = new Promise(function(resolve, reject)&#123;</div><div class="line">    var client = new XMLHttpRequest();</div><div class="line">    client.open(&quot;GET&quot;, url);</div><div class="line">    client.onreadystatechange = handler;</div><div class="line">    client.responseType = &quot;json&quot;;</div><div class="line">    client.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);</div><div class="line">    client.send();</div><div class="line">    function handler() &#123;</div><div class="line">      if (this.readyState !== 4) &#123;</div><div class="line">        return;</div><div class="line">      &#125;</div><div class="line">      if (this.status === 200) &#123;</div><div class="line">        resolve(this.response);</div><div class="line">      &#125; else &#123;</div><div class="line">        reject(new Error(this.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">  return promise;</div><div class="line">&#125;;</div><div class="line">getJSON(&quot;/posts.json&quot;).then(function(json) &#123;</div><div class="line">  console.log(&apos;Contents: &apos; + json);</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  console.error(&apos;出错了&apos;, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h5 id="Promise-all-当有一个ajax请求，它的参数需要另外2个甚至更多请求都有返回结果之后才能确定，那么这个时候，就需要用到Promise-all来帮助我们应对这个场景。"><a href="#Promise-all-当有一个ajax请求，它的参数需要另外2个甚至更多请求都有返回结果之后才能确定，那么这个时候，就需要用到Promise-all来帮助我们应对这个场景。" class="headerlink" title="Promise.all() 当有一个ajax请求，它的参数需要另外2个甚至更多请求都有返回结果之后才能确定，那么这个时候，就需要用到Promise.all来帮助我们应对这个场景。"></a>Promise.all() 当有一个ajax请求，它的参数需要另外2个甚至更多请求都有返回结果之后才能确定，那么这个时候，就需要用到Promise.all来帮助我们应对这个场景。</h5><p>Promise.all接收一个Promise对象组成的数组作为参数，当这个数组所有的Promise对象状态都变成resolved或者rejected的时候，它才会去调用then方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var url = &apos;https://&apos;;</div><div class="line">var url1 = &apos;https://&apos;;</div><div class="line">function renderAll() &#123;</div><div class="line">    return Promise.all([getJSON(url), getJSON(url1)]);</div><div class="line">&#125;</div><div class="line">renderAll().then(function(value) &#123;</div><div class="line">    // 建议大家在浏览器中看看这里的value值</div><div class="line">    console.log(value);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>用Promise.all来执行，all接收一个数组参数，里面的值最终都算返回Promise对象。这样，三个异步操作的并行执行的，等到它们都执行完后才会进到then里面。</p>
<h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h5><p>all方法的效果实际上是<code style="background:#2d9fb3;color:white;">「谁跑的慢，以谁为准执行回调」</code>，那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」，这就是race方法，这个词本来就是赛跑的意思.与Promise.all相似的是，Promise.race都是以一个Promise对象组成的数组作为参数，不同的是，只要当数组中的其中一个Promsie状态变成resolved或者rejected时，就可以调用.then方法了。而传递给then方法的值也会有所不同，大家可以再浏览器中运行下面的例子与上面的例子进行对比。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function renderRace() &#123;</div><div class="line">    return Promise.race([getJSON(url), getJSON(url1)]);</div><div class="line">&#125;</div><div class="line">renderRace().then(function(value) &#123;</div><div class="line">    console.log(value);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="async／await"><a href="#async／await" class="headerlink" title="async／await"></a>async／await</h4><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><p>async函数返回一个<code style="background:#2d9fb3;color:white;"> Promise</code> 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function timeout(ms) &#123;</div><div class="line">  return new Promise((resolve) =&gt; &#123;</div><div class="line">    setTimeout(resolve, ms);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">async function asyncPrint(value, ms) &#123;</div><div class="line">  await timeout(ms);</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line">asyncPrint(&apos;hello world&apos;, 50);</div></pre></td></tr></table></figure></p>
<p>由于async函数返回的是 Promise 对象，可以作为await命令的参数。所以，上面的例子也可以写成下面的形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">async function timeout(ms) &#123;</div><div class="line">  await new Promise((resolve) =&gt; &#123;</div><div class="line">    setTimeout(resolve, ms);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">async function asyncPrint(value, ms) &#123;</div><div class="line">  await timeout(ms);</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line">asyncPrint(&apos;hello world&apos;, 50);</div></pre></td></tr></table></figure></p>
<p>async 函数有多种使用形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 函数声明</div><div class="line">async function foo() &#123;&#125;</div><div class="line">// 函数表达式</div><div class="line">const foo = async function () &#123;&#125;;</div><div class="line">// 对象的方法</div><div class="line">let obj = &#123; async foo() &#123;&#125; &#125;;</div><div class="line">obj.foo().then(...)</div><div class="line">// Class 的方法</div><div class="line">class Storage &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.cachePromise = caches.open(&apos;avatars&apos;);</div><div class="line">  &#125;</div><div class="line">  async getAvatar(name) &#123;</div><div class="line">    const cache = await this.cachePromise;</div><div class="line">    return cache.match(`/avatars/$&#123;name&#125;.jpg`);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const storage = new Storage();</div><div class="line">storage.getAvatar(&apos;jake&apos;).then(…);</div><div class="line">// 箭头函数</div><div class="line">const foo = async () =&gt; &#123;&#125;;</div></pre></td></tr></table></figure></p>
<p>项目中，主要是在异步获取数据的时候用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.addNoticeParam = await Vue.http.get(url,&#123;params:&#123;id:id&#125;&#125;).then( data =&gt; data.data.data)</div></pre></td></tr></table></figure></p>
<p>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try…catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">async function f()&#123;</div><div class="line">  try&#123;</div><div class="line">      await Promise.reject(&apos;出错了&apos;)</div><div class="line">  &#125;catch(e)&#123;</div><div class="line"></div><div class="line">  &#125;;</div><div class="line">  return await Promise.reslove(&apos;hello&apos;)</div><div class="line">&#125;;</div><div class="line">f().then().catch()</div><div class="line">//或者</div><div class="line">async function f() &#123;</div><div class="line">  await Promise.reject(&apos;出错了&apos;)</div><div class="line">    .catch(e =&gt; console.log(e));</div><div class="line">  return await Promise.resolve(&apos;hello world&apos;);</div><div class="line">&#125;</div><div class="line">f().then(v =&gt; console.log(v))</div></pre></td></tr></table></figure></p>
<h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>模块功能主要有两个命令：<br>export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</p>
<h5 id="export"><a href="#export" class="headerlink" title="export"></a>export</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 写法一</div><div class="line">export var m = 1;</div><div class="line">// 写法二</div><div class="line">var m = 1;</div><div class="line">export &#123;m&#125;;</div><div class="line">// 写法三</div><div class="line">var n = 1;</div><div class="line">export &#123;n as m&#125;;</div></pre></td></tr></table></figure>
<p>上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。<br>项目中采用的都是这种输出变量的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  state,</div><div class="line">  getters,</div><div class="line">  actions,</div><div class="line">  mutations</div><div class="line">&#125;</div><div class="line">//</div><div class="line">export default &#123;</div><div class="line">  components: &#123;collectList&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="import"><a href="#import" class="headerlink" title="import"></a>import</h5><p>使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。<br>// main.js<br>import {firstName, lastName, year} from ‘./profile’;<br>function setName(element) {<br>  element.textContent = firstName + ‘ ‘ + lastName;<br>}<br>上面代码的import命令，用于加载profile.js文件，并从中输入变量。import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import &#123;getUri&#125; from &apos;./../../config/config.js&apos;</div></pre></td></tr></table></figure></p>
<p>由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 报错</div><div class="line">import &#123; &apos;f&apos; + &apos;oo&apos; &#125; from &apos;my_module&apos;;</div><div class="line">// 报错</div><div class="line">let module = &apos;my_module&apos;;</div><div class="line">import &#123; foo &#125; from module;</div><div class="line">// 报错</div><div class="line">if (x === 1) &#123;</div><div class="line">  import &#123; foo &#125; from &apos;module1&apos;;</div><div class="line">&#125; else &#123;</div><div class="line">  import &#123; foo &#125; from &apos;module2&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h5><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export const RECEIVE_MINE = &apos;RECEIVE_MINE&apos;</div><div class="line">export const VIEW_SUBMIT = &apos;VIEW_SUBMIT&apos;</div><div class="line">export const DELETE_MINE = &apos;DELETE_MINE&apos;</div></pre></td></tr></table></figure>
<p>导入的时候可以这么用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// mutatin-type.js</div><div class="line">import * as types from &apos;../mutation-types&apos;</div></pre></td></tr></table></figure></p>
<p> export default<br>从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。<br>每个模块只能有一个默认的导出值。<br>default 表示这是一个默认的导出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 导出默认值</div><div class="line">export default function(a, b) &#123;</div><div class="line">    return a + b;</div><div class="line">&#125;</div><div class="line">也可以是：</div><div class="line">// 导出默认值</div><div class="line">function sum(a, b) &#123;</div><div class="line">    return a + b;</div><div class="line">&#125;</div><div class="line">export default sum;</div><div class="line">如果要导入默认值的话，就不能加大括号了：</div><div class="line">import sum from &apos;./example.js&apos;;</div><div class="line">如果文件中既有默认值，也有非默认值：</div><div class="line"> export let age = 18;</div><div class="line"> export default function(a, b) &#123;</div><div class="line">     return a + b;</div><div class="line"> &#125;</div><div class="line">那么导入的时候就需要这样写：</div><div class="line">import add, &#123; age &#125; from &apos;./example.js&apos;;</div><div class="line">// 在 import 语句中，默认值必须排在非默认值之前</div></pre></td></tr></table></figure></p>
<p>看实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 第一组</div><div class="line">export default function crc32() &#123; // 输出</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">import crc32 from &apos;crc32&apos;; // 输入</div><div class="line">// 第二组</div><div class="line">export function crc32() &#123; // 输出</div><div class="line">  // ...</div><div class="line">&#125;;</div><div class="line">import &#123;crc32&#125; from &apos;crc32&apos;; // 输入</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h3><p>官方已经宣布不会更新vue-resource,推荐采用更加成熟的axios作为请求的第三方资源。不管是vue-resource还是axios或者之前的ng里的$http,很多用法都是一样的，大差不差，但都要严格按照官网的用法来。举一个项目用到的例子：<br>下载文件夹，想想用到的一般都是Post请求，然后其他的自己当时就想不到了。就在下载这块，自己卡顿了半天，不知道如何下手，好在涛哥给予指点，其中一点教育我自己去看官网，很感谢涛哥，让我自生自灭，自己一点点磨官网。第一次看vue-resource文档的时候就直接百度，后来慢慢发现，像这种post请求必须看官网，看官网的实例才能请求到数据，因为不管是vue-resource还是axios版本更新迭代才快，网上有的实例不知道是哪个版本的，或许你看到的这个版本已经废弃了。<br>这里，点击下载，我们需要掌握的是：<br>1.post 请求，需要传递的Body实体，确定是什么类型，官网给的是Object, FormData, string，在这里我用的是string<br>2.headers头部，因为我们这里最终的结果是下载的文件，根据http请求头，我们需要响应的头部是二进制，也就是需要设置<code style="background:#2d9fb3;color:white;">headers：{‘Content-type’: ‘application/octet-stream’}</code><br>3.如何承载文件，用到的是Blob()<br>完整的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">function downloadFile(blob, fileName) &#123;</div><div class="line">  var link = document.createElement(&apos;a&apos;);</div><div class="line">  link.href = window.URL.createObjectURL(blob);</div><div class="line">  link.download = fileName;</div><div class="line">  link.style.display = &apos;none&apos;;</div><div class="line">  // 触发点击</div><div class="line">  document.body.appendChild(link);</div><div class="line">  link.click();</div><div class="line">  // 然后移除</div><div class="line">  document.body.removeChild(link);</div><div class="line">&#125;;</div><div class="line">fileDownloadFn(&#123;commit&#125;,&#123;param&#125;) &#123;</div><div class="line">  commit(types.REQUEST_START,&apos;file&apos;)</div><div class="line">  const url = getUri(&apos;fileDownload&apos;,&apos;file&apos;)</div><div class="line">  const paramPath = &#123;path:param[&apos;path&apos;]&#125;</div><div class="line">  var fileName = param[&apos;name&apos;]</div><div class="line">  Vue.http.get(url ,&#123;</div><div class="line">      params:paramPath,</div><div class="line">      responseType: &apos;blob&apos;,</div><div class="line">      headers:&#123;&apos;Content-type&apos;: &apos;application/octet-stream&apos;&#125;</div><div class="line">  &#125;)</div><div class="line">  .then( json =&gt; &#123;</div><div class="line">    let idParam = &#123; &#125;</div><div class="line">    const data = json.data</div><div class="line">    commit(types.REQUEST_END,&apos;file&apos;)</div><div class="line">    var blob = new Blob([data])</div><div class="line">    downloadFile(blob,fileName)</div><div class="line">    commit(types.FILEDOWN,&#123;data&#125;)</div><div class="line">  &#125;)</div><div class="line">  .catch()</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Webpack-基本配置"><a href="#Webpack-基本配置" class="headerlink" title="Webpack 基本配置"></a>Webpack 基本配置</h3><p>现在遇到的一个问题就是，生产环境中的bundle.js已经压缩编译过了，但体积还是达到了2.2M，这对于性能一般的网站来说就是个灾难，为了干掉这个bug,不得不去好好学习webPack的相关知识以及基本配置。明天我将单独写篇文章叙说webpack，未完待续</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基本上算是完整了跟了一个前端项目，总结一个多月的实战，唯一想说的是<br>1.多看文档，多实战。不要怕新东西，尤其是ES6,我们要展开双臂，迎接新的js时代的到来。不要落伍，就只能硬啃！！<br>2.理清思路在敲代码,自己不要慌，不要乱，用本子记录一下思考的过程。尤其是自己写的代码出现Bug的时候，涛哥说就是自己理思路的一个过程，想想自己的思路是咋样，然后一步步debugger，这样问题很快就排查出来<br>3.说的最多的一点就是要多总结，但自己确实比较lazy(懒到家了！！)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:#2d9fb3;&quot;&gt;看到朋友圈里要么是风景要么是美食，我就知道我离他们不远了&lt;br&gt;——鸟哥哥&lt;/blockquote&gt;&lt;/p&gt;
&lt;p style=&quot;text-indent:20px&quot;&gt;前前后后大约一个多月的时间，中间几经波折，几经修改原型，也曾想过认怂，好在凭借自己坚韧的毅力和默默地坚持，终于算是完成了项目一稿（前期掉了好几斤肉…）。现在趁着国庆期间，好好总结中间踩过的坑。据说国庆之后的第四季度是公司最忙的时候，估计以后又要每天加班，与代码为伴了，有点可怜的feel。(加班没关系，身体最重要！虽然很年轻，但我也不能过度的耗损自己的身体。)&lt;br/&gt;&lt;br&gt;说重点，本项目是一个小型的关于文档操作的系统，技术栈主要采用&lt;code style=&quot;background:#2d9fb3;color:white;&quot;&gt;Vue2.0+Vuex+vue-router+ES6+vue-resource&lt;/code&gt;。为什么选择了vue作为前端框架?一是可维护性，技术学习曲线，二是项目本身很小，采用ng这种重量级框架有点大材小用。最终选择Vue还是很感激涛哥（谢谢大神，后面在好好感激一番）&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://niaogege.site/categories/vue/"/>
    
    
      <category term="前端" scheme="http://niaogege.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://niaogege.site/tags/js/"/>
    
      <category term="Vue" scheme="http://niaogege.site/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>关于Http中的四种Header Fields(首部字段)</title>
    <link href="http://niaogege.site/2017/09/09/%E5%85%B3%E4%BA%8EHttp%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8DHeader-Fields-%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5/"/>
    <id>http://niaogege.site/2017/09/09/关于Http中的四种Header-Fields-首部字段/</id>
    <published>2017-09-09T12:20:16.000Z</published>
    <updated>2017-10-03T09:26:04.242Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center" style="color:hsl(0,60%,50%);">‘作为前端开发人员，掌握必要的Http协议中是 necessary,尤其是http首部’<br>——Front_end</blockquote><br>世界上几乎所有的 HTTP 协议都是由 TCP / IP 协议来承载的。它是互联网相关的各类协议族的总称（通常所说的规则，就是协议）。<br>从输入的 URL 里我们可以从中获取服务器端的 IP 地址与端口号，建立一条 TCP 连接。建立连接之后，在客户端和服务器端之间交换的报文，不会丢失，受损，或者失序。</p>
<ul>
<li>HTTP想要发送一条报文的时候，需要经过以下两个步骤：</li>
<li>TCP三次握手建立起连接管道，HTTP报文会以流的形式通过该管道按顺序传输；</li>
<li>TCP会将这些数据分别切割成数据块，并且封装在IP分组中，通过IP去传输；</li>
</ul>
<a id="more"></a>
<ul>
<li>前端要想获得大量的数据，发送http请求是必要的。发送请求和响应请求里面的字段信息在我刚入门的时候就想好好掌握，这不，最近项目中刚好用到 Content-type:  说明了实体主体内对象的媒体类型，或者显示此HTTP请求提交的内容类型。一般只有post提交时才需要设置该属性。或者也叫做MIME类型（Multipurpose Internet Mail Extensions:多用途因特网邮件扩展），在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。<br>有关Content-Type属性值可以如下两种编码类型：<br>（1）“application/x-www-form-urlencoded”： 表单数据向服务器提交时所采用的编码类型，默认的缺省值就是“application/x-www-form-urlencoded”。 然而，在向服务器发送大量的文本、包含非ASCII字符的文本或二进制数据时这种编码方式效率很低。<br>（2）“multipart/form-data”： 在文件上载时，所使用的编码类型应当是“multipart/form-data”，它既可以发送文本数据，也支持二进制数据上载。<br>当提交为表单数据时，可以使用“application/x-www-form-urlencoded”；当提交的是文件时，就需要使用“multipart/form-data”编码类型。(后续会详细介绍Content-Type中的实例)本文参考《图解HTTP》</li>
</ul>
<h3 id="4种HTTP首部字段类型"><a href="#4种HTTP首部字段类型" class="headerlink" title="4种HTTP首部字段类型"></a>4种HTTP首部字段类型</h3><ul>
<li>通用首部字段(General Header Fileld)<br>请求报文和响应报文双方都会使用的首部</li>
<li>请求首部字段(Request Header Fileld)<br>从客户端向服务端发送请求报文时使用的首部，补充了请求的附加内容、客户端信息、相应内容以及优先级信息</li>
<li>响应首部字段(Response Header Fileld)<br>从服务端向客户端发送请求报文时使用的首部,补充响应的附加内容，也会要求客户端附加额外的内容信息</li>
<li>实体首部字段(Entity Header Fileld)<br>针对请求报文和响应报文的实体部分使用的首部，补充了资源内容更新时间与实体相关的信息</li>
</ul>
<h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><h4 id="Cache-control-操作缓存的工作机制"><a href="#Cache-control-操作缓存的工作机制" class="headerlink" title="Cache-control 操作缓存的工作机制"></a>Cache-control 操作缓存的工作机制</h4><p>  实例：Cache-Control:public, max-age=31536000<br>  Cache-Control:public(表明其他用户也可以利用缓存)，private(响应只以特定的用户作为对象)<br>  :no-cache:使用no-cache指令的目的是为了防止从缓存中返回过期的资源。客户端发送的请求中包含no-cache指令，那么缓存服务器不能对资源进行缓存。源服务器以后也将不再对缓存服务器请求中提出的资源有效性进行确认，且禁止对响应的资源进行缓存操作（不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源）<br>  :no-store:暗示请求和对应的响应中包换机密信息，该指令规定缓存不能再本地存储请求或响应的任一部分，（不缓存）<br>  ：max-age=604800(单位：秒)服务器返回的响应中包含max-age指令时，缓存服务器将不对资源的有效性在做确认，而max-age数值代表资源保存为缓存的最长时间，意识是说604800s（7天）之后走客户端缓存逻辑<br>  :no-transform:无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型，防止缓存或代理压缩图片等类似操作</p>
<h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>在http1.0中一个http在传输完成之后就会断开tcp链接，受到tcp慢启动的特点，每次建立http都会消耗大量的时间，所以各个浏览器定义了一个不标准的协议叫keep-alive，当然在http1.1中已经默认开启keep-alive，标识该请求在结束之后不会被断开，也就是下一个请求可以不用进行DNS查询，TCP三次握手，直接利用上一个通道进行传输。当服务器想明确断开连接时则指定Conection首部字段为Close<br> 两个作用：1.控制不在转发给代理的首部字段 2.管理持久连接</p>
<h4 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a>Pragma</h4><p>Pragma: no-cache<br>只用在客户端发送的请求中，客户端会要求所有的中间服务器不返回缓存的资源</p>
<h4 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h4><p>首部字段Transfer-Encoding：chunked 规定传输报文主体时采用的编码方式，HTTP/1.1的传输编码方式仅对分块传输编码有效</p>
<hr>
<h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><p>Accept首部字段可通知服务器用户代理能够处理的媒体类型以及媒体类型的相对优先级，若想给显示的媒体类型增加优先级，则使用q= 来额外表示权重，用分号进行分割，不指定权重q值时，默认权重q=1.0</p>
<h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h4><p> Accept-Encoding:gzip,deflate<br> Accept-Encoding首部字段用来告知服务器用户代理支持的内容编码以及内容编码的优先级顺序，可一次性指定多种内容编码<br> Gzip:由文件压缩程序gzip生成的编码格式<br> Compress:由unix文件压缩程序compress生成的编码格式<br> deflate:组合使用zlib格式以及由deflate生成的编码格式<br> TE:gzip,deflate;q=0.5(传输编码)</p>
<h4 id="Authorization-认证信息"><a href="#Authorization-认证信息" class="headerlink" title="Authorization 认证信息"></a>Authorization 认证信息</h4><p> 首部字段Authorrization是用来告知服务器用户代理的认证信息。通常，想要通过服务器认证的用户代理会在接收到返回的401状态码响应后把首部字段Authorrization加入请求中  </p>
<h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><p> 首部字段referer会告知服务器请求的原始资源的URL</p>
<h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>当客户端的cache-control过期了怎么办，是否必须向服务器请求资源呢？<br>HTTP的设计者们当然没有那么傻，这个时候就要用到协商缓存了。</p>
<h5 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h5><p>在服务端第一次返回资源的时候，如果带上一个last-modified参数，也就是告知客户端，这个资源在这个时间我更新过了，下次你记得给我带过来，我验证一下在这个时间之后是否有被更新过，如果没有，那就返回304，你客户端直接取本地缓存即可，如果有更新，那会返回200，并且附上最新的last-modified值。</p>
<h5 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h5><p>用Last-Modified有个问题，比如说我在一秒钟更新了多次资源，那这个资源只要第一次被缓存了，1秒钟更新再多次请求的时候还是会返回304。另外有些文件会被定时touch，这个时候文件内容可能没有变化，但是也会返回200。针对以上问题，出现了Etag，在第一次Response的时候，服务端会返回一个Etag，一般Etag是根据文件散列计算出来的，所以只要文件内容没变，该Etag也唯一，这样客户端下次请求的时候带上上次服务器返回的Etag给服务器校验，如果两次一样，服务器就会返回304。<br>首部字段Etag能告知客户端实体标识，它是一种可将资源以字符串的形式作唯一标志的方式，服务器会为每份资源分配对应的Etag值。资源被缓存时，Etag就会被分配唯一性标识。当中文版浏览器访问谷歌会返回中文版对应的资源，英文版浏览器则会返回英文版对应资源。两者的URL是一样的，所以仅凭Uri指定缓存的资源是相当困难的，etag分强Etage和弱Etag，强Etag不论实体发送多么细微的变化都会改变其值弱Etag只用于提示资源是否相同，只有资源发生了根本改变，产生差异时才会改变Etag值（最开始时附加W/）</p>
<h4 id="vary"><a href="#vary" class="headerlink" title="vary"></a>vary</h4><p>对缓存进行控制，源服务器会向代理服务器传达试用本地缓存的命令<br>vary:Accept-Encoding</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:hsl(0,60%,50%);&quot;&gt;‘作为前端开发人员，掌握必要的Http协议中是 necessary,尤其是http首部’&lt;br&gt;——Front_end&lt;/blockquote&gt;&lt;br&gt;世界上几乎所有的 HTTP 协议都是由 TCP / IP 协议来承载的。它是互联网相关的各类协议族的总称（通常所说的规则，就是协议）。&lt;br&gt;从输入的 URL 里我们可以从中获取服务器端的 IP 地址与端口号，建立一条 TCP 连接。建立连接之后，在客户端和服务器端之间交换的报文，不会丢失，受损，或者失序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP想要发送一条报文的时候，需要经过以下两个步骤：&lt;/li&gt;
&lt;li&gt;TCP三次握手建立起连接管道，HTTP报文会以流的形式通过该管道按顺序传输；&lt;/li&gt;
&lt;li&gt;TCP会将这些数据分别切割成数据块，并且封装在IP分组中，通过IP去传输；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="http" scheme="http://niaogege.site/categories/http/"/>
    
    
      <category term="http" scheme="http://niaogege.site/tags/http/"/>
    
      <category term="Content-Type" scheme="http://niaogege.site/tags/Content-Type/"/>
    
      <category term="Post" scheme="http://niaogege.site/tags/Post/"/>
    
  </entry>
  
  <entry>
    <title>Vue中关于pagination分页和搜索之后的列表页组件</title>
    <link href="http://niaogege.site/2017/08/27/Vue%E4%B8%AD%E5%85%B3%E4%BA%8Epagination%E5%88%86%E9%A1%B5%E5%92%8C%E6%90%9C%E7%B4%A2%E4%B9%8B%E5%90%8E%E7%9A%84%E5%88%97%E8%A1%A8%E9%A1%B5%E7%BB%84%E4%BB%B6/"/>
    <id>http://niaogege.site/2017/08/27/Vue中关于pagination分页和搜索之后的列表页组件/</id>
    <published>2017-08-27T09:08:55.000Z</published>
    <updated>2017-08-27T09:17:36.755Z</updated>
    
    <content type="html"><![CDATA[<p>分页组件是开发者必备，也是必须要掌握的，如果有时间好好研究一下如何写组件，现贴出一般用法，elementUi 和iviewUi官网都有，上手很快。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">HTML:</div><div class="line">	&lt;div class=&quot;pagination&quot; v-if=&quot;status&gt;0&quot;&gt;</div><div class="line">      &lt;el-pagination</div><div class="line">        @size-change=&quot;handleSizeChange&quot;</div><div class="line">        @current-change=&quot;handleCurrentChange&quot;</div><div class="line">        :current-page=&quot;param.page&quot;</div><div class="line">        :page-sizes=&quot;pageSizes&quot;</div><div class="line">        :page-size=&quot;param.count&quot;</div><div class="line">        layout=&quot;sizes, prev, pager, next&quot;</div><div class="line">        :total=&quot;listData.pageinfo.total&quot;&gt;</div><div class="line">      &lt;/el-pagination&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">js:</div><div class="line">	data () &#123;</div><div class="line">      return &#123;</div><div class="line">        pageSizes: DEFINE.BOXPAGESIZE,</div><div class="line">        param: &#123;</div><div class="line">          mark: DEFINE.MARK,</div><div class="line">          page: 1,</div><div class="line">          count: DEFINE.BOXPAGEDFAULT,</div><div class="line">          title: &apos;&apos;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">	 methods: &#123;</div><div class="line">      handleSizeChange (val) &#123;</div><div class="line">        console.log(val)</div><div class="line">      &#125;,</div><div class="line">      handleCurrentChange (val) &#123;</div><div class="line">        this.param.page = val</div><div class="line">        this.getList()</div><div class="line">      &#125;,</div><div class="line">      searchClick () &#123;</div><div class="line">        if (!this.param.title) &#123;</div><div class="line">          console.warn(&apos;请先输入要搜索的标题&apos;)</div><div class="line">          return false</div><div class="line">        &#125;</div><div class="line">        this.getList()</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      getList () &#123;</div><div class="line">        this.$store.dispatch(&#123;</div><div class="line">          type: &apos;getCollectList&apos;,</div><div class="line">          param: this.param</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分页组件是开发者必备，也是必须要掌握的，如果有时间好好研究一下如何写组件，现贴出一般用法，elementUi 和iviewUi官网都有，上手很快。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://niaogege.site/categories/js/"/>
    
      <category term="Vue" scheme="http://niaogege.site/categories/js/Vue/"/>
    
    
      <category term="js" scheme="http://niaogege.site/tags/js/"/>
    
      <category term="Vue" scheme="http://niaogege.site/tags/Vue/"/>
    
      <category term="component" scheme="http://niaogege.site/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>Vuex中actions、mutations、state三大核心的理解</title>
    <link href="http://niaogege.site/2017/08/20/Vuex%E4%B8%ADactions%E3%80%81mutations%E3%80%81state%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://niaogege.site/2017/08/20/Vuex中actions、mutations、state三大核心的理解/</id>
    <published>2017-08-20T08:42:01.000Z</published>
    <updated>2017-08-20T08:53:56.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center" style="color:green;white-space:12px;"><br>1.应用层级的状态应该集中到单个 store 对象中。2.提交 mutation是更改状态的唯一方法，并且这个过程是同步的。3.异步逻辑都应该封装到 action 里面</blockquote>

<p>原本一心学习ng的本人，因为项目需要，投身于Vue的浪潮中。由于时间仓促，很多核心概念更是无法深刻理解。这不，在vuex中就遇到了N多坑，还好，涛哥指点在下要不停地看文档，不停地实战，看文档，终于有了点领悟。但时间太赶，本人还得继续浏览文档。<br><br><a href="https://vuex.vuejs.org/" target="_blank" rel="external">Vuex</a><br><a href="https://segmentfault.com/a/1190000005891026" target="_blank" rel="external">使用 Vuex + Vue.js 构建单页应用</a></p>
<hr>
<p><i style="font-size:12px">后面会继续更新</i></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:green;white-space:12px;&quot;&gt;&lt;br&gt;1.应用层级的状态应该集中到单个 store 对象中。2.提交 mutation是更改状态的唯一方法，并且这个过程是同步
    
    </summary>
    
      <category term="Vue" scheme="http://niaogege.site/categories/Vue/"/>
    
      <category term="Vuex" scheme="http://niaogege.site/categories/Vue/Vuex/"/>
    
    
      <category term="js" scheme="http://niaogege.site/tags/js/"/>
    
      <category term="Vue" scheme="http://niaogege.site/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://niaogege.site/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>Ng中的checkbox 和 Radio 取值问题</title>
    <link href="http://niaogege.site/2017/08/06/ng%E4%B8%AD%E7%9A%84checkbox-%E5%92%8C-radio-%E5%8F%96%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <id>http://niaogege.site/2017/08/06/ng中的checkbox-和-radio-取值问题/</id>
    <published>2017-08-06T03:33:42.000Z</published>
    <updated>2017-08-06T04:57:49.593Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center" style="color:green;white-space:12px;">“多思考，多总结，多实践”</blockquote></p>
<p></p><p style="color:hsl(0,1%,60%);font-size:12px;font-style:italic"><br>很多时候看到别人写的代码很优雅，或者竟然能用这种方法写出来。感觉很神奇！这时，如果自己再多想一下或者多多实践一下，或许看到的知识就是自己的了。上周五，部门会议说到每周五做个技术分享，对于平时不怎么思考的人来说，是时候好好做做技术总结了。</p><br>每周的周末都是最幸福的时候，可以睡懒觉，可以看电视，刷微博，好开心的feel，不过，还有一件事得做一下，即所谓的自我沉淀。本周沉淀的主题是关于 angular 中的单选和多选取值问题。这个问题困扰了我好久，到现在依然是懵懵懂懂的，特别感谢网易的小神<a href="https://nsne.github.io/" target="_blank" rel="external">涛哥</a>指点迷津，或许下一个时间段总结的时候懂得更加深刻一点！<p></p>
<hr>
<a id="more"></a>
<h3 id="含有一个name字段，获取到选中的值"><a href="#含有一个name字段，获取到选中的值" class="headerlink" title="含有一个name字段，获取到选中的值"></a>含有一个name字段，获取到选中的值</h3><p>一个多月前，项目遇到一个需求，就是提交form表单的时候，获取到对应字段的值。这些选项包括单选和多选，数据也都从后端传递出来的。之前遇到这种问题都是每个选项写一个方法，手动的获取选择的值，比如这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">HTML：</div><div class="line">	&lt;ul&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;input type=&quot;checkbox&quot; ng-click=&quot;handAllSelect()&quot; ng-checked=&quot;AllSelect()&quot;&gt;</div><div class="line">        &lt;label for=&quot;&quot; &gt;全选&lt;/label&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li ng-repeat=&quot;list in recent_status&quot;&gt;</div><div class="line">        &lt;input type=&quot;checkbox&quot; ng-click=&quot;handselect(list)&quot; id=&quot;list.id&quot; ng-checked=&quot;isSelect(list)&quot;&gt;</div><div class="line">        &lt;label for=&quot;&quot; ng-bind=&quot;list.name&quot;&gt;&lt;/label&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line"></div><div class="line">//后端获取到的数据结构：</div><div class="line"> $scope.recent_status=[</div><div class="line">      &#123;id : 1, name : &apos;正常&apos;&#125;,</div><div class="line">      &#123;id : 2, name : &apos;轻损&apos;&#125;,</div><div class="line">      &#123;id : 3, name : &apos;重损&apos;&#125;</div><div class="line">    ];</div></pre></td></tr></table></figure></p>
<p>之前的做法是这样的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//写了4个方法，分别是点击的时候把对应的id 放进去</div><div class="line">//点击全选的时候把获取到的所有数据都放进去</div><div class="line">//对应的选中状态，用到的是ng-checked,其实只要返回值是true的话都能表示选中的值</div><div class="line">	function handselect(item)&#123;</div><div class="line">      var index =$scope.checkbox.indexOf(item.id);</div><div class="line">      if( index &gt;= 0)&#123;</div><div class="line">        $scope.checkbox.splice(index,1);</div><div class="line">      &#125;</div><div class="line">      if( index &lt; 0)&#123;</div><div class="line">        $scope.checkbox.push(item.id);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">    function isSelect(item)&#123;</div><div class="line">      return $scope.checkbox.indexOf(item.id) &gt; -1;</div><div class="line">    &#125;;</div><div class="line">    function handAllSelect()&#123;</div><div class="line">      angular.forEach($scope.recent_status,function(k,v)&#123;</div><div class="line">        $scope.checkbox.push(k.id);</div><div class="line">      &#125;);</div><div class="line">      $scope.checkbox =$scope.checkbox.filter((item,index) =&gt; $scope.checkbox.indexOf(item) == index);</div><div class="line">    &#125;;</div><div class="line">    function AllSelect()&#123;</div><div class="line">      return $scope.recent_status.length == $scope.checkbox.length;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这是之前的做法，后来进一步优化，变成了4个方法，主要做的其实就是合并，把原先的选中状态的方法合成到了两个方法中，同时用一个ng-model与之绑定,判断ng-model绑定的值是true还是false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">HTML：</div><div class="line">	&lt;ul&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;input type=&quot;checkbox&quot; ng-click=&quot;handAllSelect()&quot; ng-model=&quot;isSelect&quot;&gt;</div><div class="line">        &lt;label for=&quot;&quot; &gt;全选&lt;/label&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li ng-repeat=&quot;list in recent_status&quot;&gt;</div><div class="line">        &lt;input type=&quot;checkbox&quot; ng-click=&quot;handselect(list)&quot; id=&quot;list.id&quot; ng-checked=&quot;checkbox.indexOf(list.id) &gt; -1&quot;&gt;</div><div class="line">        &lt;label for=&quot;&quot; ng-bind=&quot;list.name&quot;&gt;&lt;/label&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">JS:</div><div class="line">	function handselect(item)&#123;</div><div class="line">      var index =$scope.checkbox.indexOf(item.id);</div><div class="line">      if( index &gt;= 0)&#123;</div><div class="line">        $scope.checkbox.splice(index,1);</div><div class="line">      &#125;else&#123;</div><div class="line">        $scope.checkbox.push(item.id);</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      if($scope.checkbox.length == $scope.recent_status.length)&#123;</div><div class="line">        $scope.selected=true;</div><div class="line">      &#125;else&#123;</div><div class="line">        $scope.selected=false;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    function handAllSelect()&#123;</div><div class="line">		if($scope.selected)&#123;</div><div class="line">	    angular.forEach($scope.recent_status,function(k,v)&#123;</div><div class="line">			if($scope.checkbox.indexOf(k) &lt; 0)</div><div class="line">			$scope.checkbox.push(k.id);</div><div class="line">		  &#125;);</div><div class="line">		&#125;else&#123;</div><div class="line">		  $scope.checkbox=[];</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="含有多个name字段，获取到选中的值"><a href="#含有多个name字段，获取到选中的值" class="headerlink" title="含有多个name字段，获取到选中的值"></a>含有多个name字段，获取到选中的值</h3><p>后端返回的数据中既有单选又有多选，并且字段名都不一样的，很多个，这时候不可能为每一个字段名写一个方法，这样做不科学。而且也不实用，这时候就要用到原生的ng双向绑定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line">&lt;ul class=&quot;options_box&quot; &gt;</div><div class="line">        &lt;li ng-repeat=&quot;item in ques.ques_items&quot;&gt;</div><div class="line">            &lt;div ng-repeat=&quot;nums in item.ques_item_options&quot; ng-if=&quot;item.ques_item_type==1&quot;&gt;</div><div class="line">                &lt;input type=&quot;radio&quot; class=&quot;magic-radio &quot; id=&quot;&#123;&#123;item.ques_item_id&#125;&#125;&#123;&#123;nums.option_id&#125;&#125;&quot; name=&quot;&#123;&#123;item.ques_item_id&#125;&#125;&quot; value=&quot;&#123;&#123;nums.option_id&#125;&#125;&quot; ng-model=&quot;result[item.ques_item_id]&quot;&gt;</div><div class="line">                &lt;label for=&quot;&#123;&#123;item.ques_item_id&#125;&#125;&#123;&#123;nums.option_id&#125;&#125;&quot; ng-bind=&quot;nums.option_label&quot;&gt;&lt;/label&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div ng-repeat=&quot;nums in item.ques_item_options&quot; ng-if=&quot;item.ques_item_type==2&quot;&gt;</div><div class="line">                &lt;input type=&quot;checkbox&quot; class=&quot;magic-radio&quot; id=&quot;&#123;&#123;item.ques_item_id&#125;&#125;&#123;&#123;nums.option_id&#125;&#125;&quot; ng-model=&quot;result[item.ques_item_id][nums.option_id]&quot;&gt;</div><div class="line">                &lt;label for=&quot;&#123;&#123;item.ques_item_id&#125;&#125;&#123;&#123;nums.option_id&#125;&#125;&quot; ng-bind=&quot;nums.option_label&quot;&gt;&lt;/label&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">     &lt;/ul&gt;</div><div class="line">//js</div><div class="line">		$scope.result = &#123;&#125;;</div><div class="line">        $scope.ques = &#123;</div><div class="line">            ques_items: [</div><div class="line">                &#123;</div><div class="line">                    ques_item_type: 1,</div><div class="line">                    ques_item_id: 1, //问题id</div><div class="line">                    ques_item_options: [</div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;A&apos;,</div><div class="line">                            option_label: &apos;测试1&apos;</div><div class="line">                        &#125;,</div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;B&apos;,</div><div class="line">                            option_label: &apos;测试2&apos;</div><div class="line">                        &#125;,    </div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;C&apos;,</div><div class="line">                            option_label: &apos;测试3&apos;</div><div class="line">                        &#125;,  </div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;D&apos;,</div><div class="line">                            option_label: &apos;测试4&apos;</div><div class="line">                        &#125;</div><div class="line">                    ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    ques_item_type: 2,</div><div class="line">                    ques_item_id: 2,</div><div class="line">                    ques_item_options: [</div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;A&apos;,</div><div class="line">                            option_label: &apos;测试1&apos;</div><div class="line">                        &#125;,</div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;B&apos;,</div><div class="line">                            option_label: &apos;测试2&apos;</div><div class="line">                        &#125;,    </div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;C&apos;,</div><div class="line">                            option_label: &apos;测试3&apos;</div><div class="line">                        &#125;,  </div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;D&apos;,</div><div class="line">                            option_label: &apos;测试4&apos;</div><div class="line">                        &#125;</div><div class="line">                    ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    ques_item_type: 2,</div><div class="line">                    ques_item_id: 3,</div><div class="line">                    ques_item_options: [</div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;A&apos;,</div><div class="line">                            option_label: &apos;测试1&apos;</div><div class="line">                        &#125;,</div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;B&apos;,</div><div class="line">                            option_label: &apos;测试2&apos;</div><div class="line">                        &#125;,    </div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;C&apos;,</div><div class="line">                            option_label: &apos;测试3&apos;</div><div class="line">                        &#125;,  </div><div class="line">                        &#123;</div><div class="line">                            option_id: &apos;D&apos;,</div><div class="line">                            option_label: &apos;测试4&apos;</div><div class="line">                        &#125;</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>1) 将个选项name设置为相同，设置为item.ques_item_id，也就是题的id，</p>
<p>2) 设置value(当前选项的id)值来表示选择了哪一项，必须设置checkbox多选，因为多选可能会有多个结果，不能再result[n] = ‘A’,在这里我给每个选项绑定了一个值,即result[n]<a href="n为题号，option为选项">option</a>，同样通过result[n]获取n题选择了什么，不过此时值为一个object，即类似于result[n] = {‘A’: true, B: ‘false’}, 我们获取选中项的时候，不光要获取result[n], 还要过滤掉其中为false的选项。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:green;white-space:12px;&quot;&gt;“多思考，多总结，多实践”&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;color:hsl(0,1%,60%);font-size:12px;font-style:italic&quot;&gt;&lt;br&gt;很多时候看到别人写的代码很优雅，或者竟然能用这种方法写出来。感觉很神奇！这时，如果自己再多想一下或者多多实践一下，或许看到的知识就是自己的了。上周五，部门会议说到每周五做个技术分享，对于平时不怎么思考的人来说，是时候好好做做技术总结了。&lt;/p&gt;&lt;br&gt;每周的周末都是最幸福的时候，可以睡懒觉，可以看电视，刷微博，好开心的feel，不过，还有一件事得做一下，即所谓的自我沉淀。本周沉淀的主题是关于 angular 中的单选和多选取值问题。这个问题困扰了我好久，到现在依然是懵懵懂懂的，特别感谢网易的小神&lt;a href=&quot;https://nsne.github.io/&quot;&gt;涛哥&lt;/a&gt;指点迷津，或许下一个时间段总结的时候懂得更加深刻一点！&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="js" scheme="http://niaogege.site/categories/js/"/>
    
      <category term="Angular" scheme="http://niaogege.site/categories/js/Angular/"/>
    
    
      <category term="js" scheme="http://niaogege.site/tags/js/"/>
    
      <category term="Angular" scheme="http://niaogege.site/tags/Angular/"/>
    
      <category term="checkbox" scheme="http://niaogege.site/tags/checkbox/"/>
    
      <category term="radio" scheme="http://niaogege.site/tags/radio/"/>
    
  </entry>
  
  <entry>
    <title>jS:关于对象遍历和数组遍历的那些事</title>
    <link href="http://niaogege.site/2017/07/22/jS-%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86%E5%92%8C%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://niaogege.site/2017/07/22/jS-关于对象遍历和数组遍历的那些事/</id>
    <published>2017-07-22T10:20:43.000Z</published>
    <updated>2017-07-22T16:19:49.016Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center" style="color:green;">“Talk is cheap,show me the Code”<br>——Front_end</blockquote><br>可能是由于职业的关系，下班之后完全不想Open PC，但很多知识点有必要自己做个小小总结。上个月做项目的时候，遇到了关于数据重组的事，自己废了老半天也没搞定，很无脑是不是。现在回想起来，当初没弄好是正常的，本人之前对Array和Object完全没概念。</p>
<h4 id="遍历对象的方法："><a href="#遍历对象的方法：" class="headerlink" title="遍历对象的方法："></a>遍历对象的方法：</h4><p>Object.keys(Object) | for(item in Object)| object.getOwnPropertyNames(o)</p>
<h4 id="遍历数组的方法："><a href="#遍历数组的方法：" class="headerlink" title="遍历数组的方法："></a>遍历数组的方法：</h4><p>Array.forEach() | Array.map() | Array.filter() | Array.some() | Array.every()</p>
<p>下面一一来说说每种遍历方法都是干啥子用的</p>
<hr>
<a id="more"></a>
<h2 id="遍历对象-枚举一个对象的所有属性："><a href="#遍历对象-枚举一个对象的所有属性：" class="headerlink" title="遍历对象,枚举一个对象的所有属性："></a>遍历对象,枚举一个对象的所有属性：</h2><p>从 ECMAScript 5 开始，有三种原生的方法用于列出或枚举对象的属性：</p>
<ul>
<li>for…in 循环<br>该方法依次访问一个对象及其原型链中所有可枚举的属性。</li>
<li>Object.keys(o)<br>该方法返回一个对象 o 自身包含（不包括原型中）的所有属性的名称的数组。</li>
<li>Object.getOwnPropertyNames(o)<br>该方法返回一个数组，它包含了对象 o 所有拥有的属性（无论是否可枚举）的名称。<br><img src="/images/072301.png"><br>pay attention:Object.keys(object)返回的是一个数组。如图：<br><img src="/images/072304.png"></li>
</ul>
<hr>
<h2 id="遍历数组-interating-over-array"><a href="#遍历数组-interating-over-array" class="headerlink" title="遍历数组(interating over array)"></a>遍历数组(interating over array)</h2><p>遍历数组元素并以某种方式处理每个元素是一个常见的操作。以下是最简单的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var colors = [&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;];</div><div class="line">for (var i = 0; i &lt; colors.length; i++) &#123;</div><div class="line">  console.log(colors[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="array-forEach"><a href="#array-forEach" class="headerlink" title="array.forEach()"></a>array.forEach()</h4><p>对数组中的而每一项运行传入的函数，没有返回值，本质是与for循环迭代数组一样，一般的用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var numbers =[111,11,2,3];</div><div class="line">numbers.forEach(function(item,index,array)&#123;</div><div class="line">	//console.log(item,index,array)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [3, 5, 7];</div><div class="line">arr.forEach(item =&gt; &#123;</div><div class="line">    console.log(item);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>由于 arrow function 的特性，自动绑定父 scope 的 this， 会更加简洁，而且少了个function关键字，可读性更好。</p>
<h4 id="array-some-和array-every"><a href="#array-some-和array-every" class="headerlink" title="array.some() 和array.every()"></a>array.some() 和array.every()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr=[1,2,3,4];</div><div class="line">var everyresult =arr.every((item,index,array) =&gt; item&gt;2);</div><div class="line">console.log(everyresult)//false</div></pre></td></tr></table></figure>
<p>两者用法比较相似，用于查询数组中的项是否满足某个条件，两者都有返回值，且返回值是boolean,true or false,every()只有每一项都满足才能返回true，否则返回false,some()则是相反的。切记返回值是true或者false;</p>
<h4 id="array-map-和array-filter"><a href="#array-map-和array-filter" class="headerlink" title="array.map()和array.filter()"></a>array.map()和array.filter()</h4><p>两个方法比较相似，都有返回值，且返回的还都是数组，不是布尔类型。filter()，利用指定的函数确定是否在返回的数组中包含某一项。用来数组去重比较灵活<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr1=[11,22,223,24,3,42,3,11,11,2,3333,3333333,2];</div><div class="line">var arr2 = arr1.filter((k,index) =&gt; arr1.indexOf(k) === index).sort((a,b) =&gt; a-b &gt; 1);</div><div class="line">Result: [3, 2, 11, 22, 24, 42, 223, 3333, 3333333]</div></pre></td></tr></table></figure></p>
<p>又或者用法某一项值返回true的情况下：<br><img src="/images/072305.png"><br>map()页返回一个数组，不过，map有一点不好的地方在于不能控制循环的流程，如果不能完成，就返回undefined继续下一次迭代。所以遇到可能会返回undefined的情况应该用forEach或者for循环遍历。<br>如图：<br><img src="/images/072306.png"><br>不过，JQ里的$.map()功能比较强大，可以遍历而且返回值是undefined的则被省略掉<br><img src="/images/072307.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var obj=&#123;&quot;send_message&quot;:&#123;&quot;1&quot;:false,&quot;2&quot;:true&#125;,&quot;audit_type&quot;:&#123;&quot;1&quot;:true,&quot;2&quot;:false,&quot;3&quot;:true&#125;&#125;;</div><div class="line">var res=&#123;&#125;;</div><div class="line">for(item in obj)&#123;</div><div class="line">	var value =obj[item];</div><div class="line">	var arr =Object.keys(value);</div><div class="line">	var arr2 = $.map(arr,function(kk,vv)&#123;</div><div class="line">	if(vv)&#123;</div><div class="line">	return kk</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">	res[item]=arr2.join();&#125;</div><div class="line">console.log(res,&apos;res&apos;);</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.遍历对象，Object.keys(object)遍历出来的是键名，而不是键值，参数必须是对象。<br>2.遍历数组，前提必须是数组，才能用filter/map/every/some/forEach等这几个方法，且注意map()和filter()是有返回值的，map()有自己的缺陷，有可能返回undefined，而filter()返回的则是为true的某一项<br>3.join（）则是使用不同的分隔符来构建字符串，数组默认情况下以逗号分隔的形式返回数组项。<br>4.虽然数组也是对象的一种，但确是Array类型，检测数组的几种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(arr instanceof Array)&#123;console.log(&apos;shuzu&apos;)&#125;;</div><div class="line">or:</div><div class="line">if(Array.isArray (arr))&#123;console.log(&apos;shuzu&apos;)&#125;</div><div class="line">or:</div><div class="line">if(Object.prototype.toString.call(arr) == &apos;[object Array]&apos;)&#123;console.log(&apos;我是数组&apos;)&#125;</div></pre></td></tr></table></figure></p>
<p>第三种办法比较万能，推荐使用！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot; style=&quot;color:green;&quot;&gt;“Talk is cheap,show me the Code”&lt;br&gt;——Front_end&lt;/blockquote&gt;&lt;br&gt;可能是由于职业的关系，下班之后完全不想Open PC，但很多知识点有必要自己做个小小总结。上个月做项目的时候，遇到了关于数据重组的事，自己废了老半天也没搞定，很无脑是不是。现在回想起来，当初没弄好是正常的，本人之前对Array和Object完全没概念。&lt;/p&gt;
&lt;h4 id=&quot;遍历对象的方法：&quot;&gt;&lt;a href=&quot;#遍历对象的方法：&quot; class=&quot;headerlink&quot; title=&quot;遍历对象的方法：&quot;&gt;&lt;/a&gt;遍历对象的方法：&lt;/h4&gt;&lt;p&gt;Object.keys(Object) | for(item in Object)| object.getOwnPropertyNames(o)&lt;/p&gt;
&lt;h4 id=&quot;遍历数组的方法：&quot;&gt;&lt;a href=&quot;#遍历数组的方法：&quot; class=&quot;headerlink&quot; title=&quot;遍历数组的方法：&quot;&gt;&lt;/a&gt;遍历数组的方法：&lt;/h4&gt;&lt;p&gt;Array.forEach() | Array.map() | Array.filter() | Array.some() | Array.every()&lt;/p&gt;
&lt;p&gt;下面一一来说说每种遍历方法都是干啥子用的&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="js" scheme="http://niaogege.site/categories/js/"/>
    
    
      <category term="js" scheme="http://niaogege.site/tags/js/"/>
    
      <category term="Array" scheme="http://niaogege.site/tags/Array/"/>
    
      <category term="Object" scheme="http://niaogege.site/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>随笔：总结最近一个月的学习历程</title>
    <link href="http://niaogege.site/2017/07/09/%E9%9A%8F%E7%AC%94%EF%BC%9A%E6%80%BB%E7%BB%93%E6%9C%80%E8%BF%91%E4%B8%80%E4%B8%AA%E6%9C%88%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    <id>http://niaogege.site/2017/07/09/随笔：总结最近一个月的学习历程/</id>
    <published>2017-07-09T13:26:02.000Z</published>
    <updated>2017-07-09T15:00:28.273Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">“一入前端深似海”<br></blockquote><br>最近一个月，基本上都在搞演播室预约。总共三个页面，整了快一个月了，开发进度有点慢，开发水平有点低。随着时间的流逝，后面开发的难度会越来越大。‘大鹏，你天天这样会早衰的’。看似一句玩笑话，背后却隐藏着很多。确实，最近，感觉开发效率在变低，虽然时间还是那么长，但产出不成正比。<br>所以，接下来的几周，我需要好好调整一下自己的节奏，不要因为外在的条条框框限制了自己的思路。</p>
<p>最近，开发用到的一大技术仍然还是ng，虽然已经接触了两个月了，但我感觉仍然没入门，angular核心思想仍然没有领悟，四大核心：1.模块化和依赖注入 2.数据双向绑定 3.自定义指令 4.MVC.</p>
<hr>
<a id="more"></a>
<p>随着开发的深入，用到的知识点越来越深入。之前熟知的三脚猫功夫难以满足项目的需要，所以，自己必须跟上开发的节奏和进度，多学习，聪明一点。<br>1.自定义指令 Directive<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=&quot;myController&quot;&gt;</div><div class="line">		&lt;expander expander-title=&quot;title&quot;&gt;</div><div class="line">			&#123;&#123;text&#125;&#125;</div><div class="line">		&lt;/expander&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		var myModule =angular.module(&apos;myApp&apos;,[])</div><div class="line">		.controller(&apos;myController&apos;,function($scope)&#123;</div><div class="line">			$scope.title =&apos;点击展开&apos;;</div><div class="line">			$scope.text=&quot;这里是内部指令的内容&quot;;</div><div class="line">		&#125;)</div><div class="line">		.directive(&apos;expander&apos;,function()&#123;</div><div class="line">			return &#123;</div><div class="line">			restrict : &apos;AE&apos;,</div><div class="line">			replace : true,</div><div class="line">			transclude : true,</div><div class="line">			scope : &#123;</div><div class="line">				title:&quot;=expanderTitle&quot;</div><div class="line">			&#125;,</div><div class="line">			template :&apos;&lt;div&gt;&apos;+</div><div class="line">					&apos;&lt;div class=&quot;title&quot; ng-click=&quot;toggle()&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&apos;+</div><div class="line">					&apos;&lt;div ng-show=&quot;showMe&quot;  ng-transclude&gt;&lt;/div&gt;&apos;+</div><div class="line">					&apos;&lt;/div&apos;,</div><div class="line">			link :function(scope,element,attrs)&#123;</div><div class="line">				scope.showMe =false;</div><div class="line">				scope.toggle=function()&#123;</div><div class="line">					scope.showMe=!scope.showMe;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>2.过滤器 filter</p>
<ol>
<li>模块化和依赖注入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;myApp&apos;,[])</div><div class="line">.factory(&apos;myFactory&apos;,function()&#123;</div><div class="line">	var service =&#123;&#125;;</div><div class="line">	return service;</div><div class="line">&#125;)</div><div class="line">.directive(&apos;myDirective&apos;,function()&#123;</div><div class="line">	return &#123;</div><div class="line">		template:&apos;&lt;button&gt;Click me&lt;/button&gt;&apos;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;“一入前端深似海”&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;最近一个月，基本上都在搞演播室预约。总共三个页面，整了快一个月了，开发进度有点慢，开发水平有点低。随着时间的流逝，后面开发的难度会越来越大。‘大鹏，你天天这样会早衰的’。看似一句玩笑话，背后却隐藏着很多。确实，最近，感觉开发效率在变低，虽然时间还是那么长，但产出不成正比。&lt;br&gt;所以，接下来的几周，我需要好好调整一下自己的节奏，不要因为外在的条条框框限制了自己的思路。&lt;/p&gt;
&lt;p&gt;最近，开发用到的一大技术仍然还是ng，虽然已经接触了两个月了，但我感觉仍然没入门，angular核心思想仍然没有领悟，四大核心：1.模块化和依赖注入 2.数据双向绑定 3.自定义指令 4.MVC.&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://niaogege.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://niaogege.site/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔：试用期第三个月有感</title>
    <link href="http://niaogege.site/2017/05/30/%E9%9A%8F%E7%AC%94%EF%BC%9A%E8%AF%95%E7%94%A8%E6%9C%9F%E7%AC%AC%E4%B8%89%E4%B8%AA%E6%9C%88%E6%9C%89%E6%84%9F/"/>
    <id>http://niaogege.site/2017/05/30/随笔：试用期第三个月有感/</id>
    <published>2017-05-30T14:14:40.000Z</published>
    <updated>2017-06-18T12:05:10.655Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">“经过三个月的打磨，转正了！！ng继续加强学习”——前端需要学习的东西太多了</blockquote>

<p>1.获得URL后面的参数以及值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function getQueryString()&#123;</div><div class="line">			var qs = (location.search.length &gt;0 ? location.search.substring(1) : &apos;&apos;),args=&#123;&#125;,</div><div class="line">			items =qs.length ? qs.split(&apos;&amp;&apos;) : [],item =null,name =null,value=null,</div><div class="line">			i =0,len =items.length;</div><div class="line">			for(i=0;i&lt;len;i++)&#123;</div><div class="line">				item =items[i].split(&apos;=&apos;);</div><div class="line">				name =decodeURIComponent(item[0]);</div><div class="line">				value =decodeURIComponent(item[1]);</div><div class="line">				if(name.length)&#123;</div><div class="line">					args[name] =value;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			return args;</div><div class="line">		&#125;</div><div class="line">		var INPUT =getQueryString();</div><div class="line">		var appId =INPUT[&apos;app&apos;];</div><div class="line">		console.log(appId);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2.表格的偶数行背景颜色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(function()&#123;</div><div class="line">	function stripeTables()&#123;</div><div class="line">		var tables = document.getElementsByTagName(&apos;table&apos;);</div><div class="line">		var odd,rows;</div><div class="line">		for(var i=0;i&lt;tables.length;i++)&#123;</div><div class="line">			odd =false;</div><div class="line">			rows =tables[i].getElementsByTagName(&apos;tr&apos;);</div><div class="line">			for(var j=0;j&lt;rows.length;j++)&#123;</div><div class="line">				if(odd == true)&#123;</div><div class="line">					rows[j].style.backgroundColor =&apos;red&apos;;</div><div class="line">					odd =false;</div><div class="line">				&#125;else&#123;</div><div class="line">					odd = true;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	window.onload =stripeTables;</div><div class="line">	stripeTables();</div><div class="line">    &#125;)();</div></pre></td></tr></table></figure></p>
<p>3.增加一个变量控制选中的状态，默认是false,表示未选中，点击的时候变量发生变化；如果为false，从数值去掉相应下标的值，如果是true, 则数组增加相应的ID。</p>
<p>4.单选和全选以及多选，checkbox</p>
<p>5.表单提交和文件上传.formData和fileRader</p>
<p>6.时间选择器。<br> web前端本来就是一项很复杂的工程量，没个一两年不要说自己是个合格web front-end engineer ，所以说希望从业者要有一颗虔诚和好学的心，默默地积攒内功，同时知道自身的不足，以此为动力！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;“经过三个月的打磨，转正了！！ng继续加强学习”——前端需要学习的东西太多了&lt;/blockquote&gt;

&lt;p&gt;1.获得URL后面的参数以及值：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function getQueryString()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			var qs = (location.search.length &amp;gt;0 ? location.search.substring(1) : &amp;apos;&amp;apos;),args=&amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			items =qs.length ? qs.split(&amp;apos;&amp;amp;&amp;apos;) : [],item =null,name =null,value=null,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			i =0,len =items.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			for(i=0;i&amp;lt;len;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				item =items[i].split(&amp;apos;=&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				name =decodeURIComponent(item[0]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				value =decodeURIComponent(item[1]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				if(name.length)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					args[name] =value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			return args;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		var INPUT =getQueryString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		var appId =INPUT[&amp;apos;app&amp;apos;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		console.log(appId);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://niaogege.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://niaogege.site/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔：试用第二个月有感</title>
    <link href="http://niaogege.site/2017/04/22/%E9%9A%8F%E7%AC%94-%E8%AF%95%E7%94%A8%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%9C%88%E6%9C%89%E6%84%9F/"/>
    <id>http://niaogege.site/2017/04/22/随笔-试用第二个月有感/</id>
    <published>2017-04-22T04:08:44.000Z</published>
    <updated>2017-04-22T11:53:55.183Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">“写代码半天，解决bug两天”——前端的坑太多了</blockquote><br>这一个月深入前端开发流程工作中，基本熟悉了业务开发的整个流程。随着试用期的往前推进，入坑的系数越来越高，真的，bug太多了，总结起来就是<span style="color:#5FBCD0">1.经验太欠缺，踩过的坑太少 2.平时总结太少，不会消化踩过的坑 3.前端领域太大太广，要学的东西太多。</span><i>所以，每周六或者周日是总结经验的好时机，一定要鞭策自己多总结，多回顾，多思考为什么会出现这么多bug，出现问题也不要急，慢慢来。</i></p>
<hr>
<a id="more"></a>
<p>从4月1日到4月22日，三周的时间，刚翻看了工作日志，其实完成的工作内容难度系数不是很高，但本人做起来非常费事，很棘手，没办法，只能牺牲其他时间来弥补了。</p>
<h4 id="项目一：虚拟朋友圈"><a href="#项目一：虚拟朋友圈" class="headerlink" title="项目一：虚拟朋友圈"></a>项目一：虚拟朋友圈</h4><p>大约是4月初接到的项目，我负责的内容就是前端开发，前面静态页面敲得很快，三个页面，大概一天的时间完成，后面是静态页面的一些交互效果，这些效果写了三天，大体就是模拟微信朋友圈的样式。其实在这时，我应该模拟Json对象，因为对很多效果我不知道是前台实现还是后台实现，比如，点完赞和评论，到底是不是实时显示，这个如果是后台实现的话就很简单了，有我就呈现，如果没有就不呈现呗。前端做的工作就是根据后台返回的数据进行展示，只是如何展示就看你怎么做了？</p>
<h5 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h5><p>前台静态页面写完之后，有一个事自己忽略了。就是后台接口没有提供的话，自己可以提前模拟json对象。<br>JSON可以表示三种类型的值:<br>一是简单值，可以表示JSON字符串数值(eg:”hello world”)和null，js字符串与JSON字符串最大的区别是JSON字符串必须使用双引号;<br>二是JSON对象，一组无序的键值对儿;<br>三数组，一组有序的值的列表<br>JSON对象比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">id: &quot;24&quot;,</div><div class="line">status: &quot;已置顶&quot;,</div><div class="line">top: &quot;4&quot;,</div><div class="line">pub_time: &quot;2017-04-14 07:39:23&quot;,</div><div class="line">&#125;</div><div class="line">],</div><div class="line">liked: [</div><div class="line">&quot;四月鸟凉&quot;,</div><div class="line">]</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<ul>
<li>JSON对象和js对象字面量相比，首先JSON没有声明变量二JSON对象的属性必须加双引号</li>
<li>数组，JSON数组没有变量和分号，这是就可以使用res[0]的用法了。</li>
<li>JSON对象有两个方法，<code>stringfy()</code>:把js对象序列化JSON字符串，比如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var book = &#123;</div><div class="line">				title: &quot;js&quot;，</div><div class="line">				author: [&quot;chen peng&quot;],</div><div class="line">				edition: 3,</div><div class="line">				year: 2011</div><div class="line">&#125;;</div><div class="line"></div><div class="line">	var josnText =JSON.stringfy(book);</div><div class="line">    jsonText中的字符串如下：</div><div class="line">	&#123;&quot;title&quot;:&quot;js&quot;,&quot;author&quot;:[&quot;chen peng&quot;],&quot;edition&quot;:3,&quot;year&quot;:2011&#125;</div><div class="line"></div><div class="line">parse()把JSON字符串解析为原生js值</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="template-js"><a href="#template-js" class="headerlink" title="template.js"></a><code>template.js</code></h5><p>高性能模板引擎 artTemplate.js</p>
<ul>
<li>核心方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">template(filename, data);</div><div class="line">// 将模板源代码编译成函数</div><div class="line">template.compile(source, options);</div><div class="line">// 将模板源代码编译成函数并立刻执行</div><div class="line">template.render(source, data, options);</div><div class="line"></div><div class="line">- 条件与循环</div><div class="line">&lt;code&gt;if else if else if</div><div class="line">each /each&lt;/code&gt;</div><div class="line">简介语法中双大括号老是报错，this is why</div><div class="line"></div><div class="line"></div><div class="line">- 实例</div><div class="line">&lt;code&gt;</div><div class="line">	var viewTpl = &#123;</div><div class="line">            html: &apos;&#123;&#123;if list&#125;&#125;&apos;+</div><div class="line">                  &apos;&#123;&#123;each list.data&#125;&#125;&apos;+</div><div class="line">                        &apos;&lt;div class=&quot;box&quot; &gt;&apos;+</div><div class="line">                              &apos;&#123;&#123;if list.data.index_pic&#125;&#125;&apos;+</div><div class="line">                                    &apos;&lt;img src=&quot;&#123;&#123;= $value.index_pic&#125;&#125;&quot;&gt;&apos;+</div><div class="line">                                    &apos;&lt;div class=&quot;share&quot;&gt;点击分享&lt;/div&gt;&apos;+</div><div class="line">                              &apos;&#123;&#123;else&#125;&#125;&apos;+</div><div class="line">                                    &apos;&lt;div class=&quot;null&quot;&gt;&lt;/div&gt;&apos;+</div><div class="line">                                    &apos;&lt;div class=&quot;share_null&quot;&gt;点击分享&lt;/div&gt;&apos;+</div><div class="line">                              &apos;&#123;&#123;/if&#125;&#125;&apos;+&apos;&apos;</div><div class="line">                        &apos;&lt;/div&gt;&apos;+</div><div class="line">                  &apos;&#123;&#123;/each&#125;&#125;&apos;+</div><div class="line">                  &apos;&#123;&#123;/if&#125;&#125;&apos;,</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">&lt;/code&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="jquery-UI的widget-组件化方法"><a href="#jquery-UI的widget-组件化方法" class="headerlink" title="jquery UI的widget()组件化方法"></a>jquery UI的widget()组件化方法</h5><p> $.widget(‘命名空间.插件名’, $.继承插件的命名空间.插件名,{ /<em> snip </em>/ });<br> 后面还会作进一步探讨！</p>
<hr>
<h4 id="项目二：签到日历查询"><a href="#项目二：签到日历查询" class="headerlink" title="项目二：签到日历查询"></a>项目二：签到日历查询</h4><p>也是需要和后台数据交互的内容，返回的json首先看是数组还是对象，如果是数组，则要json[0]，自己一定要有这样的意识。<br>签到日历用到的方法另外印象极其深刻的就是 map()方法已经相关数组方法比如split(‘-‘)和indexOf()</p>
<h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var ary = [12,23,24,42,1];</div><div class="line">var res = ary.map(function (item,index,input) &#123;</div><div class="line">     return item*10;</div><div class="line">&#125;)</div><div class="line">console.log(res);//--&gt;[120,230,240,420,10];</div><div class="line">console.log(ary);//--&gt;[12,23,24,42,1]；</div></pre></td></tr></table></figure>
<h5 id="array方法大汇总"><a href="#array方法大汇总" class="headerlink" title="array方法大汇总"></a>array方法大汇总</h5><p>MDN中列出了所有array中数组的方法<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">array方法大汇总</a></p>
<h5 id="项目中用到的js"><a href="#项目中用到的js" class="headerlink" title="项目中用到的js"></a>项目中用到的js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> success : function( json )&#123;                                                	</div><div class="line">			var arr=[];</div><div class="line">			var arr0 =[];</div><div class="line">			var arr1 = [];</div><div class="line">			json[0].sign_info.map(function(v)&#123;</div><div class="line">				var year = v.sign_date.split(&apos;-&apos;)[0];</div><div class="line">				var month = v.sign_date.split(&apos;-&apos;)[1];</div><div class="line">				var day = v.sign_date.split(&apos;-&apos;)[2];</div><div class="line">				arr.push(day);</div><div class="line">				arr0.push(year);</div><div class="line">				arr1.push(month);</div><div class="line">			&#125;);</div><div class="line">			</div><div class="line">			$(&apos;.calender-content .calender-cell&apos;).each(function()&#123;</div><div class="line">				var id=$(this).attr(&apos;data-id&apos;);</div><div class="line">				var id0 = $(&apos;#calender-year&apos;).text();</div><div class="line">				var id1 = $(&apos;#calender-mon&apos;).text();</div><div class="line">//													</div><div class="line">				if(arr.indexOf(id)&gt;-1 &amp;&amp; id &amp;&amp; arr0.indexOf(id0)&gt;-1 &amp;&amp; arr1.indexOf(id1)&gt;-1 )&#123; </div><div class="line">					$(this).addClass(&apos;qiandao&apos;);</div><div class="line">				&#125;</div><div class="line">			&#125;); </div><div class="line">			</div><div class="line">			$(&apos;#con-attend&apos;).text(json[0].lasted);</div><div class="line">			$(&apos;.total-points&apos;).text(json[0].credit1);</div><div class="line">			var currDay= parseInt(arr[arr.length-1]);</div><div class="line">			if(currentDay === currDay)&#123;</div><div class="line">			$(&apos;.sign-img-qiandao&apos;).attr(&apos;src&apos;,&apos;images/qietu/已签@2x.png&apos;);</div><div class="line">			$(&apos;.sign-img-qiandao&apos;).attr(&apos;data-id&apos;,&apos;1&apos;);</div><div class="line">			$(&apos;.sign-img-qiandao&apos;).unbind();</div><div class="line">			&#125;;</div></pre></td></tr></table></figure>
<hr>
<p>最近脑子有点混乱，需要好好休息休息，好好总结，后面还有大把的时间，急什么啊？？？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;“写代码半天，解决bug两天”——前端的坑太多了&lt;/blockquote&gt;&lt;br&gt;这一个月深入前端开发流程工作中，基本熟悉了业务开发的整个流程。随着试用期的往前推进，入坑的系数越来越高，真的，bug太多了，总结起来就是&lt;span style=&quot;color:#5FBCD0&quot;&gt;1.经验太欠缺，踩过的坑太少 2.平时总结太少，不会消化踩过的坑 3.前端领域太大太广，要学的东西太多。&lt;/span&gt;&lt;i&gt;所以，每周六或者周日是总结经验的好时机，一定要鞭策自己多总结，多回顾，多思考为什么会出现这么多bug，出现问题也不要急，慢慢来。&lt;/i&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://niaogege.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://niaogege.site/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔：试用第一个月有感</title>
    <link href="http://niaogege.site/2017/03/26/%E9%9A%8F%E7%AC%94%EF%BC%9A%E8%AF%95%E7%94%A8%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%9C%88%E6%9C%89%E6%84%9F/"/>
    <id>http://niaogege.site/2017/03/26/随笔：试用第一个月有感/</id>
    <published>2017-03-26T13:30:41.000Z</published>
    <updated>2017-04-22T09:43:01.739Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">“我昨天一口气写了5个ajax请求”</blockquote>

<p>误打误撞，终于入行了，很激动也很紧张，上班的时候总是有种莫名的紧迫感，有太多的东西需要学习，有太多的东西自己以前根本没涉及到，所以，保守估计两年以后，我才敢保证自己，说自己是“前端攻城狮(Front-end develop engineer)”。<br>1.json/array和object,json对象<br>2.angularJS1使用<br>3.http协议和头部信息，后台数据交互<br>4.Ajax调用<br>5.复习巩固js，尤其是一些基础的用法，比如事件对象、事件冒泡</p>
<hr>
<a id="more"></a>
<p>以上五点是半年的主攻方向，当然什么小的特效和js效果可以搞搞，但别花费太多的精力，五个主要知识点还没掌握，我个人认为其他的先别涉及，（项目需要的除外），精力有限，再怎么想学所有的技术也得一步步来，关键是急了无用，做到心中有数和自己现阶段的目标，总比现在莫名紧张的好。</p>
<p>回首一个月的试用，每天都在逼迫自己写工作日志(工作需要)，但有时真的不知道该如何是好，比如我昨天搞视觉江苏会员中心样式修改和图片上传功能，然后今天还是如此，我总不能天天写一样的工作日志吧，其实每天的工作内容都是不一样的，只是属于大项目下的一个小小的分支，说明还是工作日志写的不详细呗。</p>

<hr>
<p></p><p>废话少说，进入正文。这一个我主要做了一下几项工作。</p><p></p>
<h4 id="五福的收集"><a href="#五福的收集" class="headerlink" title="五福的收集"></a>五福的收集</h4><p>刚上班的第一天，就接到小明指派的工作任务，时间只有两天。具体任务就是跟支付宝集五福的功能差不多，给了我开发文档和需要介绍和psd，我就看那个开发文档看了半天，愣是不知道自己该干嘛，如何工作，没有一点头绪，到了第二天，小明问我进展如何，我慌了，我啥也没干啊，后来了问了大神才知道，第一步静态页面实现，第二步小明采用的是jQuery里UI的template方法，关于这个template，到现在我也是一知半解的，过两天再好好问问，主要是这段代码不晓得，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var param = &#123;&#125;;</div><div class="line">param.access_token = res.userInfo.userTokenKey;</div><div class="line"> $.ajax(&#123;</div><div class="line">		type : &apos;post&apos;,</div><div class="line">		url : $.api.data,</div><div class="line">		data : param,</div><div class="line">		dataType : &apos;json&apos;,                                            </div><div class="line">	  success : function( json )&#123;</div><div class="line">			var data = &#123;&#125;;</div><div class="line">			data.list = json;</div><div class="line">			$.each( data.list.data, function(k,v)&#123;</div><div class="line">				  shareinfo.title = v.title;</div><div class="line">				  shareinfo.brief = v.brief;</div><div class="line">				  shareinfo.logo = v.logo;</div><div class="line">				  shareinfo.id = v.id;</div><div class="line">			&#125;)</div><div class="line">			var listTpl = template.compile( viewTpl.html ),</div><div class="line">				listHtml = listTpl( data );</div><div class="line">			$(&apos;.container-middle&apos;).html( listHtml );</div><div class="line">	  &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>ajax调用之后，为毛传参用这种方式，加一个param传参，还有请求成功后，传回来的数据json为什么是data.list =json;可以直接用Json的属性和子集，哎，有问题再去请教小明吧。</p>
<hr>
<h4 id="会员中心页面"><a href="#会员中心页面" class="headerlink" title="会员中心页面"></a>会员中心页面</h4><p>接手的项目没有一个是软差事，全都是要与后台对接的。好家伙，这次的会员中心也是如此，我刚是图片上传功能到现在还没明白，当点击上传时，发送一个ajax请求，然后，图片开始上传，填写相关的textarea信息，然后绑定到指定的图片id,当点击上传文稿时，再次发送一个表单请求，这时表单信息上传完毕。这里有个关于删除图片的功能，关键是理清逻辑，知道每一个步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var del_pic=$(this).data(&apos;pic_id&apos;);</div><div class="line">del_pic.click(</div><div class="line">if(!access_token)&#123;</div><div class="line">location.href=&quot;?goUrl=&quot;+goUrl;</div><div class="line">return;</div><div class="line">	$.ajax(&#123;</div><div class="line">		type:&apos;post&apos;,</div><div class="line">		url:&quot;接口地址?pic_id=&quot;+pic_id,</div><div class="line">		dataType:&apos;json&apos;,</div><div class="line">		data:&#123;pic_id:&apos;pic_id&apos;&#125;,</div><div class="line">		success:function(data)&#123;</div><div class="line">			var pic=data.pic_id.remove();//删除匹配的所有元素或者删除所对应的ID</div><div class="line">			$(ul li).remove(&apos;img[data-pic_id=pic_id]&apos;);//.remove(&apos;li[title=luobo]&apos;)remove方法通过传递参数来选择性的删除元素</div><div class="line">			pic.appendTo(&quot;父级元素&quot;);//或者采用empty()清空节点		</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>妈的，上传“欧文的图片”之后，发现一张更帅气的图片，所以要删除之前的重新上传，如何删除对应的之前的图片呢，这时第一张图片已经成功发送到了服务器，不然客户端怎么会实时显现，现在要删除第一张图，只能用ajax异步请求的而方法，删除对应id的图片。</p>
<hr>
<h4 id="直播视频以及相关样式的调整"><a href="#直播视频以及相关样式的调整" class="headerlink" title="直播视频以及相关样式的调整"></a>直播视频以及相关样式的调整</h4><p>还是蛮感谢封大神的，让我终于了解了什么是ajax，什么是请求，以及如何传参，如何和后台对接接口的事，现奉上一段代码，当时我脑袋就要炸了，不想用Js去写html结构，难度不难，只是当时很痛苦，现在想想还是得先写静态页面啊，这是基础。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$.getJSON(url,function(json)&#123;</div><div class="line"></div><div class="line">		if(json[0])&#123;</div><div class="line">			var str = &quot;&quot;;</div><div class="line">			$.each(json,function(index,array)&#123;</div><div class="line">						    var pic = array.materail;</div><div class="line">							str += &apos;&lt;div class=\&quot;item\&quot; data-thread_id=&apos; + array.id+ &quot;&gt;&quot; + &apos;&lt;div class=\&quot;cur-date\&quot;&gt;&apos; ;</div><div class="line">							str += &apos;&lt;/div&gt;&lt;div class=\&quot;item-cont\&quot; style=\&quot;overflow: hidden;\&quot;&gt;&lt;div class=\&quot;item-left\&quot;&gt;&lt;span id=\&quot;this_time\&quot;&gt;&apos;+ array.format_create_time +&apos;&lt;/span&gt;&apos;;</div><div class="line">							str += &apos;&lt;/div&gt;&lt;div class=&quot;item-right&quot;&gt;&lt;div class=&quot;item-right-cont&quot;&gt;&lt;div class=&quot;right-cont-header&quot;&gt;&apos;;</div><div class="line">							str += &apos;&lt;span&gt;&apos;+ array.user_name +&apos;&lt;/span&gt;&lt;span  &gt;&lt;img class=&quot;dianzan&quot; src=&quot;http://yanan.tw.hdyun.hoge.cn//views//res/images/common/2.png&quot;&gt; &lt;span class=\&quot;info\&quot;&gt;&apos;+ array.ding +&apos;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&apos;;</div><div class="line">							str += &apos;&lt;p&gt;&apos;+ array.content +&apos;&lt;/p&gt;&lt;br&gt;&apos;;</div><div class="line">						if( pic )&#123;</div><div class="line">							$len = pic.length;</div><div class="line">							for(i=0; i &lt; $len ; i++)&#123;</div><div class="line">								 if(pic[i].type == &quot;video&quot;)&#123;</div><div class="line">										 str += &apos;&lt;video width=&quot;100%;&quot; webkit-playsinline=&quot;true&quot; controls=&quot;controls&quot; poster=&quot;&apos;+ pic[i].host + pic[i].dir + &apos;300X/&apos; + pic[i].filepath + pic[i].filename +&apos;&quot; src=&quot;&apos;+ pic[i].m3u8 +&apos;&quot;&gt;&lt;/video&gt;&apos;;</div><div class="line">									 &#125;else if ( pic[i].type == &quot;audio&quot; )&#123;</div><div class="line">										 str += &apos;&lt;audio controls=&quot;controls&quot; src=&quot;&apos;+ pic[i].p +&apos;&quot; &gt;&lt;/audio&gt;&apos;;</div><div class="line">									 &#125;else&#123;</div><div class="line">										 str += &apos;&lt;img style=&quot;max-width:250px;height:auto&quot; src=&quot;&apos;+ pic[i].host + pic[i].dir + pic[i].filepath + pic[i].filename +&apos;&quot;&gt;&apos;;</div><div class="line">									 &#125;</div><div class="line">								 &#125;</div><div class="line">						 &#125;</div><div class="line">						str += &apos;&lt;/div&gt;&lt;/div&gt;&lt;span class=&quot;tip&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&apos;;</div><div class="line">				&#125;);</div><div class="line">			 $(&apos;.first-cont&apos;).html(str);</div><div class="line">	 &#125;)</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="学会总结与巩固"><a href="#学会总结与巩固" class="headerlink" title="学会总结与巩固"></a>学会总结与巩固</h4><ul>
<li>$.each();</li>
<li>自定义属性值的获取</li>
<li>设置和获取cookie</li>
<li>理解事件对象</li>
<li>编写$.widget()插件</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;“我昨天一口气写了5个ajax请求”&lt;/blockquote&gt;

&lt;p&gt;误打误撞，终于入行了，很激动也很紧张，上班的时候总是有种莫名的紧迫感，有太多的东西需要学习，有太多的东西自己以前根本没涉及到，所以，保守估计两年以后，我才敢保证自己，说自己是“前端攻城狮(Front-end develop engineer)”。&lt;br&gt;1.json/array和object,json对象&lt;br&gt;2.angularJS1使用&lt;br&gt;3.http协议和头部信息，后台数据交互&lt;br&gt;4.Ajax调用&lt;br&gt;5.复习巩固js，尤其是一些基础的用法，比如事件对象、事件冒泡&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://niaogege.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://niaogege.site/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>GIT Three :Learn How to Use Git (三)</title>
    <link href="http://niaogege.site/2017/03/12/GIT-three-learn-how-to-use-git-%E4%B8%89/"/>
    <id>http://niaogege.site/2017/03/12/GIT-three-learn-how-to-use-git-三/</id>
    <published>2017-03-12T11:23:59.000Z</published>
    <updated>2017-03-12T13:32:17.341Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">读书的意义大概就是用生活所感去读书，用读书所得去生活吧</blockquote><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="external"><strong><em>原文链接</em></strong></a></p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>
<hr>
<a id="more"></a>
<h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><ul>
<li><code style="background:#2D9FB3;color:white;">$ git checkout -b dev </code>创建并切换到分支dev</li>
<li>然后，用git branch命令查看当前分支：</li>
<li>然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：</li>
<li>现在，dev分支的工作完成，我们就可以切换回master分支：<code style="background:#2D9FB3;color:white;">git checkout master</code>才是指向提交的，所以，HEAD指向的就是当前分支。</li>
<li>现在，我们把dev分支的工作成果合并到master分支上：<code style="background:#2D9FB3;color:white;">git merge dev</code> (git merge命令用于合并指定分支到当前分支)</li>
</ul>
<h4 id="分支合并时解决冲突"><a href="#分支合并时解决冲突" class="headerlink" title="分支合并时解决冲突"></a>分支合并时解决冲突</h4><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们手动修改后保存<br>用带参数的git log也可以看到分支的合并情况：<br><code style="background:#2D9FB3;color:white;">$ git log –graph –pretty=oneline –abbrev-commit </code></p>
<h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。<br>其他几步都一样，只是在合并分支时，请注意参数<code>–no-ff</code><br><code style="background:#2D9FB3;color:white;">$ git merge –no-ff -m “merge with no-ff” dev</code>合并后，我们用git log看看分支历史：<br><code>$ git log –graph –pretty=oneline –abbrev-commit</code>，强行删除分支用<code>git branch  -D dev</code></p>
<p><strong>分支策略</strong>：</p><p style="font-family:'微软雅黑'">首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><p></p>
<h4 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h4><p>Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：<br><code style="background:#2D9FB3;color:white;">git stash</code>.原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！用git stash list命令看看：工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用<code style="background:#2D9FB3;color:white;">git stash pop</code>，恢复的同时把stash内容也删了。</p>
<hr>
<h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><ul>
<li>要查看远程库的信息，用<code style="background:#2D9FB3;color:white;">git remote -v </code>;因此，多人协作的工作模式通常是这样：</li>
<li>首先，可以试图用<code style="background:#2D9FB3;color:white;">git push origin branch-name</code>推送自己的修改；</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>
<li>如果合并有冲突，则解决冲突，并在本地提交；</li>
<li>没有冲突或者解决掉冲突后，再用<code style="background:#2D9FB3;color:white;">git push origin branch-name</code>推送就能成功！</li>
</ul>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul>
<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>
<li>从本地推送分支，使用<code style="background:#2D9FB3;color:white;">git push origin branch-name</code>，如果推送失败，先用git pull抓取远程的新提交；</li>
<li>在本地创建和远程分支对应的分支，使用<code style="background:#2D9FB3;color:white;">git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li>
<li>建立本地分支和远程分支的关联，使用<code style="background:#2D9FB3;color:white;">git branch –set-upstream branch-name origin/branch-name</code>；</li>
<li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;读书的意义大概就是用生活所感去读书，用读书所得去生活吧&lt;/blockquote&gt;&lt;br&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000&quot;&gt;&lt;strong&gt;&lt;em&gt;原文链接&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h3&gt;&lt;p&gt;截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Git" scheme="http://niaogege.site/categories/Git/"/>
    
    
      <category term="GIT" scheme="http://niaogege.site/tags/GIT/"/>
    
      <category term="版本控制工具" scheme="http://niaogege.site/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>jQuery().on方法的使用详解</title>
    <link href="http://niaogege.site/2017/03/11/jQuery-on%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://niaogege.site/2017/03/11/jQuery-on方法的使用详解/</id>
    <published>2017-03-11T11:13:30.000Z</published>
    <updated>2017-07-22T12:13:02.499Z</updated>
    
    <content type="html"><![CDATA[<p>从厦门回来之后，两周没写博客了，主要是没时间，先放一张在厦门的靓照<br><br><img src="/images/072302.jpg" style="width:50%"><br><img src="/images/072303.jpg" style="width:50%"><br> 本文 <a href="http://blog.csdn.net/linshichen/article/details/51302683" target="_blank" rel="external"><strong>原文链接</strong></a> ，希望能帮到这些前端小白。用法：<strong>此方法可以在匹配元素上绑定一个或者多个事件处理函数。</strong> <strong>使用off()方法可以删除on()方法绑定的事件。</strong></p>
<hr>
<a id="more"></a>
<h3 id="语法结构一"><a href="#语法结构一" class="headerlink" title="语法结构一"></a>语法结构一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).on(events,[selector],[data],fn)</div></pre></td></tr></table></figure>
<ul>
<li>events:一个或多个用空格分隔的事件类型和可选的命名空间。</li>
<li>selector:可选。一个选择器字符串，用以过滤选定的元素，该选择器的子元素将调用处理程序。</li>
<li>data:可选。作为event.data属性值传递给事件对象的额外数据对象以供事件处理函数处理。</li>
<li>fn：该事件被触发时执行的函数。 false值也可以做一个函数的简写，返回false。</li>
</ul>
<hr>
<h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><p><strong><em>利用 data 参数为绑定的事件处理函数传递数据</em></strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123; </div><div class="line">  var newtext=<span class="string">"这是新文本"</span> </div><div class="line">  $(<span class="string">"div"</span>).on(<span class="string">"click"</span>,&#123;<span class="string">"mytext"</span>:newtext&#125;,<span class="keyword">function</span>(e)&#123; </div><div class="line">    $(this).text(e.data.mytext); </div><div class="line">  &#125;) </div><div class="line">&#125;) </div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">####  实例二</span></div><div class="line"></div><div class="line">通过通过选择器字符串来过滤匹配元素的子元素中哪些可以响应绑定的事件。下面的代码中，类名为children的元素和它的子元素可以调用绑定的事件</div><div class="line"></div><div class="line">``` bash</div><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123; </div><div class="line">  var newtext=<span class="string">"这是新文本"</span> </div><div class="line">  $(<span class="string">".parent"</span>).on(<span class="string">"click"</span>,<span class="string">".children"</span>,&#123;<span class="string">"mytext"</span>:newtext&#125;,<span class="keyword">function</span>(e)&#123; </div><div class="line">    $(this).text(e.data.mytext); </div><div class="line">  &#125;) </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="语法结构二"><a href="#语法结构二" class="headerlink" title="语法结构二"></a>语法结构二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).on(object,[selector],[data])</div></pre></td></tr></table></figure>
<ul>
<li>object:一个用字符串表示的，一个或多个空格分隔的事件类型和可选的命名空间，值表示事件绑定的处理函数<br>其他两个参数与之前的结构一样</li>
</ul>
<h4 id="实例一-1"><a href="#实例一-1" class="headerlink" title="实例一"></a>实例一</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123; </div><div class="line">  var newtext=<span class="string">"这是新文本"</span> </div><div class="line">  $(<span class="string">"div"</span>).on(&#123;click:<span class="keyword">function</span>(e)&#123; </div><div class="line">    $(this).text(e.data.mytext); </div><div class="line">  &#125;&#125;,&#123;<span class="string">"mytext"</span>:newtext&#125;) </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong><em>以上代码中，事件类型和事件处理函数以对象的形式绑定的。</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从厦门回来之后，两周没写博客了，主要是没时间，先放一张在厦门的靓照&lt;br&gt;&lt;br&gt;&lt;img src=&quot;/images/072302.jpg&quot; style=&quot;width:50%&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/072303.jpg&quot; style=&quot;width:50%&quot;&gt;&lt;br&gt; 本文 &lt;a href=&quot;http://blog.csdn.net/linshichen/article/details/51302683&quot;&gt;&lt;strong&gt;原文链接&lt;/strong&gt;&lt;/a&gt; ，希望能帮到这些前端小白。用法：&lt;strong&gt;此方法可以在匹配元素上绑定一个或者多个事件处理函数。&lt;/strong&gt; &lt;strong&gt;使用off()方法可以删除on()方法绑定的事件。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="js" scheme="http://niaogege.site/categories/js/"/>
    
      <category term="jQuery" scheme="http://niaogege.site/categories/js/jQuery/"/>
    
    
      <category term="js" scheme="http://niaogege.site/tags/js/"/>
    
      <category term="jQuery" scheme="http://niaogege.site/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>随笔：厦门感想</title>
    <link href="http://niaogege.site/2017/02/23/%E9%9A%8F%E7%AC%94%EF%BC%9A%E5%8E%A6%E9%97%A8%E6%84%9F%E6%83%B3/"/>
    <id>http://niaogege.site/2017/02/23/随笔：厦门感想/</id>
    <published>2017-02-23T14:54:59.000Z</published>
    <updated>2017-02-23T15:09:15.364Z</updated>
    
    <content type="html"><![CDATA[<p>  最近几天主要忙着交接工作的事，周末还要陪着两位大佬去厦门走走，这也是够忙的。<br>今天早上体检，很高兴啊，自己体重降到了147斤，不错，继续保持，希望能降到140，身体质量指数(BMI22.1)。哈哈哈~<br>  明天是我在老公司的最后一天，只想平稳度过，好好享受余下的时光。很感谢公司的栽培，感谢李总、金老师、王老师、陆叔的厚爱，感谢小仇、范爷等闺蜜同事的关心和支持，内心很激动，有点舍不得，但，既然做了选择离开也是一件好事，希望公司越来越好，希望部门越来越能赚钱。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近几天主要忙着交接工作的事，周末还要陪着两位大佬去厦门走走，这也是够忙的。&lt;br&gt;今天早上体检，很高兴啊，自己体重降到了147斤，不错，继续保持，希望能降到140，身体质量指数(BMI22.1)。哈哈哈~&lt;br&gt;  明天是我在老公司的最后一天，只想平稳度过，好好享受余
    
    </summary>
    
      <category term="随笔" scheme="http://niaogege.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔，图片" scheme="http://niaogege.site/tags/%E9%9A%8F%E7%AC%94%EF%BC%8C%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap-Three:下拉菜单、导航、分页</title>
    <link href="http://niaogege.site/2017/02/18/Bootstrap-%E4%BA%8C-%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E3%80%81%E5%AF%BC%E8%88%AA%E3%80%81%E5%88%86%E9%A1%B5/"/>
    <id>http://niaogege.site/2017/02/18/Bootstrap-二-下拉菜单、导航、分页/</id>
    <published>2017-02-18T14:31:58.000Z</published>
    <updated>2017-02-20T13:58:18.175Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>一鼓作气，再而衰，三而竭</blockquote></p>
<h3 id="dropdown"><a href="#dropdown" class="headerlink" title="dropdown"></a>dropdown</h3><ul>
<li>下拉菜单：3个元素，1.父级元素添加class为”dropdown” 2.给button添加动态交互的自定义属性：<code style="background:black;color:white">data-toggle</code>=”dropdown” 3.ul需要添加class为”dropdown-menu”</li>
</ul>
<hr>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;dropdown&quot;&gt;</div><div class="line">  &lt;button class=&quot;btn btn-default dropdown-toggle&quot; type=&quot;button&quot; id=&quot;dropdownMenu1&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;true&quot;&gt;</div><div class="line">    Dropdown</div><div class="line">    &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/button&gt;</div><div class="line">  &lt;ul class=&quot;dropdown-menu&quot; aria-labelledby=&quot;dropdownMenu1&quot;&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li role=&quot;separator&quot; class=&quot;divider&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link&lt;/a&gt;&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>下拉菜单样式<br>1.父级元素添加class为”open”，默认展开<br>2.默认左对齐，右对齐则为btn=”btn-blcok”,同时ul的class=”dropdown-menu-right”<br>3.li的标题突出。class=”dropdown-header”<br>4.分割线，给li添加class属性”divider”，内容居中用text-center</li>
</ul>
<hr>
<h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>  输入框组：1.input-group :输入框组，只针对输入框<br>  2.input-group-addon:给输入框组前后添加额外的元素<br>  3.input-group-btn:给输入框添加的额外元素是按钮<br>  4.给外层添加class为”input-group-btn”的包裹元素div,可以得到按钮组式的输入框组。不需要给父级元素添加class为”dropdown”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-lg-3&quot;&gt;</div><div class="line">				&lt;div class=&quot;input-group&quot;&gt;</div><div class="line">					&lt;div class=&quot;input-group-btn&quot;&gt;</div><div class="line">						&lt;button class=&quot;btn btn-info dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; type=&quot;button&quot;&gt;NIMa&lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/button&gt;</div><div class="line">						&lt;ul class=&quot;dropdown-menu&quot;&gt;</div><div class="line">							&lt;li&gt;&lt;a href=&quot;&quot; title=&quot;&quot;&gt;action&lt;/a&gt;&lt;/li&gt;</div><div class="line">							&lt;li&gt;&lt;a href=&quot;&quot; title=&quot;&quot;&gt;action&lt;/a&gt;&lt;/li&gt;</div><div class="line">							&lt;li&gt;&lt;a href=&quot;&quot; title=&quot;&quot;&gt;action&lt;/a&gt;&lt;/li&gt;</div><div class="line">						&lt;/ul&gt;</div><div class="line">					&lt;/div&gt;</div><div class="line">					&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;按钮上输入框&quot;/&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="img"><a href="#img" class="headerlink" title="img"></a>img</h3><p><code style="background:black;color:white;">img</code>的class为img-rounded(圆角图)、img-circle(圆图)、img-thumbnail(缩略图)、img-responsive(响应式图片)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;img/map.jpg&quot; usemap=&quot;#planetmap&quot; alt=&quot;&quot;/&gt;</div><div class="line">&lt;map name=&quot;planetmap&quot;&gt;</div><div class="line">	&lt;area shape=&quot;rect&quot; coords=&quot;510,240,660,300&quot; style=&quot;border:1px solid black&quot; href=&quot;index2.html&quot;/&gt;</div><div class="line">	&lt;area shape=&quot;rect&quot; coords=&quot;900,240,1100,300&quot; style=&quot;border:1px solid black&quot; href=&quot;index2.html&quot;/&gt;</div><div class="line">&lt;/map&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;一鼓作气，再而衰，三而竭&lt;/blockquote&gt;&lt;/p&gt;
&lt;h3 id=&quot;dropdown&quot;&gt;&lt;a href=&quot;#dropdown&quot; class=&quot;headerlink&quot; title=&quot;dropdown&quot;&gt;&lt;/a&gt;dropdown&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;下拉菜单：3个元素，1.父级元素添加class为”dropdown” 2.给button添加动态交互的自定义属性：&lt;code style=&quot;background:black;color:white&quot;&gt;data-toggle&lt;/code&gt;=”dropdown” 3.ul需要添加class为”dropdown-menu”&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="前端" scheme="http://niaogege.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="bootstrap" scheme="http://niaogege.site/categories/%E5%89%8D%E7%AB%AF/bootstrap/"/>
    
    
      <category term="前端" scheme="http://niaogege.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="bootstrap" scheme="http://niaogege.site/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Css特效：translate3d悬浮特效</title>
    <link href="http://niaogege.site/2017/02/18/css%E7%89%B9%E6%95%88%EF%BC%9Atranslate3d%E6%82%AC%E6%B5%AE%E7%89%B9%E6%95%88/"/>
    <id>http://niaogege.site/2017/02/18/css特效：translate3d悬浮特效/</id>
    <published>2017-02-18T12:21:59.000Z</published>
    <updated>2017-02-18T13:21:29.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">学习如逆水行舟，不进则退</blockquote>

<p>感觉每天如果不做笔记，自己要垮掉！学习是持久的事，不能只靠一时的激情来完成，其实，我大体也能感觉得到真正从事web前端后，工作压力肯定是非常大的！</p>
<hr>
<a id="more"></a>
<h4 id="perspective"><a href="#perspective" class="headerlink" title="perspective"></a>perspective</h4><p><code style="color:white;background:black;">perspective</code>: 500;perspective 属性定义 3D 元素距视图的距离，以像素计。该属性允许您改变 3D 元素查看 3D 元素的视图。</p>
<h4 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h4><p><code style="color:white;background:black;">transform-style</code>:preserve-3d;使被转换的子元素保留其 3D 转换,当值为<code style="color:white;background:black;">flat</code>时，子元素将不保留其 3D 位置。</p>
<h4 id="transform-translate3d-x-y-z"><a href="#transform-translate3d-x-y-z" class="headerlink" title="transform: translate3d(x,y,z)"></a>transform: translate3d(x,y,z)</h4><p>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p>
<blockquote>
<p>Css部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*&#123;margin: 0; padding: 0;&#125;</div><div class="line">ul,li&#123;list-style: none;&#125;</div><div class="line">.container&#123;perspective: 1300;-webkit-perspective:1300;&#125;</div><div class="line">.boxList&#123;position:absolute;width: 630px;height:630px;left:50%;margin-left:-315px; -webkit-transform-style: preserve-3d;transform-style: preserve-3d;/*animation: a1 2s 1;*/transition: all 2s;&#125;</div><div class="line">.boxList li&#123;float: left;width: 200px;height: 200px;margin:5px;background: darkcyan;-webkit-transition: all 0.3s;transition: all 0.3s;&#125;</div><div class="line">.on li:hover&#123;-webkit-transform: translate3d(0,10px,50px);transform: translate3d(0,10px,50px);background:deepskyblue;box-shadow: 30px 30px 10px rgba(0, 0, 0, 0.5);&#125;</div><div class="line">.on&#123;-webkit-transform: rotateX(55deg) rotateY(0deg) rotateZ(35deg);transform: rotateX(55deg) rotateY(0deg) rotateZ(35deg);&#125;</div></pre></td></tr></table></figure></p>
<p>Js部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var list=document.querySelector(&apos;.boxList&apos;);</div><div class="line">		window.onload=function()&#123;</div><div class="line">			setInterval(transition,1000)</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		function transition()&#123;</div><div class="line">			list.className=&apos;on boxList&apos;;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;学习如逆水行舟，不进则退&lt;/blockquote&gt;

&lt;p&gt;感觉每天如果不做笔记，自己要垮掉！学习是持久的事，不能只靠一时的激情来完成，其实，我大体也能感觉得到真正从事web前端后，工作压力肯定是非常大的！&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="前端" scheme="http://niaogege.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://niaogege.site/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="前端" scheme="http://niaogege.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://niaogege.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>myHeart：我心永恒</title>
    <link href="http://niaogege.site/2017/02/14/myHeart%EF%BC%9A%E6%88%91%E5%BF%83%E6%B0%B8%E6%81%92/"/>
    <id>http://niaogege.site/2017/02/14/myHeart：我心永恒/</id>
    <published>2017-02-14T15:54:51.000Z</published>
    <updated>2017-02-18T08:46:47.624Z</updated>
    
    <content type="html"><![CDATA[<p>今天是情人节，微信/微博都在撒狗粮，看看myHeart吧</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://ojjsl7zpc.bkt.clouddn.com/myHeart.gif?e=1487392781&token=NUT82f__mRq-ZGvkrbqw7Zxle80aB7nUArvrHibz:53339dxMjMwHLm1k-RjUMaQHdFg"></h2><p>源代码如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">    &lt;title&gt;情人节心跳动动画&lt;/title&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">       html, body&#123;</div><div class="line">          width: 100%;</div><div class="line">          height: 100%;</div><div class="line">          min-width: 500px;</div><div class="line">          min-height: 500px;</div><div class="line">          overflow: hidden;</div><div class="line">        &#125;</div><div class="line">        .heart &#123;</div><div class="line">          position: absolute;</div><div class="line">          width: 100px;</div><div class="line">          height: 90px;</div><div class="line">          top: 50%;</div><div class="line">          left: 50%;</div><div class="line">          margin-top: -45px;</div><div class="line">          margin-left: -50px;</div><div class="line">        &#125;</div><div class="line">        .heart:before,</div><div class="line">        .heart:after &#123;</div><div class="line">          position: absolute;</div><div class="line">          content: &quot;&quot;;</div><div class="line">          left: 50px;</div><div class="line">          top: 0;</div><div class="line">          width: 50px;</div><div class="line">          height: 80px;</div><div class="line">          background: #fc2e5a;</div><div class="line">          border-radius: 50px 50px 0 0;</div><div class="line">          transform: rotate(-45deg);</div><div class="line">          transform-origin: 0 100%;</div><div class="line">        &#125;</div><div class="line">        .heart:after &#123;</div><div class="line">          left: 0;</div><div class="line">          transform: rotate(45deg);</div><div class="line">          transform-origin :100% 100%;</div><div class="line">        &#125;</div><div class="line">        .heart1&#123;</div><div class="line">           animation: heart-anim 1s linear .4s infinite;</div><div class="line">        &#125;</div><div class="line">        .heart2&#123;</div><div class="line">           animation: pounding .5s linear infinite alternate;</div><div class="line">        &#125;</div><div class="line">        .heart1:after, .heart1:before&#123;</div><div class="line">          background-color: #ff7693;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @keyframes pounding&#123;</div><div class="line">          0%&#123; transform: scale(1.5); &#125;</div><div class="line">          100%&#123; transform: scale(1); &#125;</div><div class="line">        &#125;</div><div class="line">		@-moz-keyframes pounding&#123;</div><div class="line">          0%&#123; transform: scale(1.5); &#125;</div><div class="line">          100%&#123; transform: scale(1); &#125;</div><div class="line">        &#125;</div><div class="line">		@-webkit-keyframes pounding&#123;</div><div class="line">          0%&#123; transform: scale(1.5); &#125;</div><div class="line">          100%&#123; transform: scale(1); &#125;</div><div class="line">        &#125;</div><div class="line">		@-ms-keyframes pounding&#123;</div><div class="line">          0%&#123; transform: scale(1.5); &#125;</div><div class="line">          100%&#123; transform: scale(1); &#125;</div><div class="line">        &#125;</div><div class="line">        @keyframes heart-anim &#123;</div><div class="line">          46% &#123;</div><div class="line"></div><div class="line">            transform: scale(1);</div><div class="line">          &#125;</div><div class="line">          50% &#123;</div><div class="line">            transform: scale(1.3);</div><div class="line">          &#125;</div><div class="line">          52% &#123;</div><div class="line">            transform: scale(1.5);</div><div class="line">          &#125;</div><div class="line">          55% &#123;</div><div class="line">            transform: scale(3);</div><div class="line">          &#125;</div><div class="line">          100% &#123;</div><div class="line">            opacity: 0;</div><div class="line">            transform: scale(50);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">		@-moz-keyframes heart-anim &#123;</div><div class="line">          46% &#123;</div><div class="line"></div><div class="line">            transform: scale(1);</div><div class="line">          &#125;</div><div class="line">          50% &#123;</div><div class="line">            transform: scale(1.3);</div><div class="line">          &#125;</div><div class="line">          52% &#123;</div><div class="line">            transform: scale(1.5);</div><div class="line">          &#125;</div><div class="line">          55% &#123;</div><div class="line">            transform: scale(3);</div><div class="line">          &#125;</div><div class="line">          100% &#123;</div><div class="line">            opacity: 0;</div><div class="line">            transform: scale(50);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">		@-webkit-keyframes heart-anim &#123;</div><div class="line">          46% &#123;</div><div class="line"></div><div class="line">            transform: scale(1);</div><div class="line">          &#125;</div><div class="line">          50% &#123;</div><div class="line">            transform: scale(1.3);</div><div class="line">          &#125;</div><div class="line">          52% &#123;</div><div class="line">            transform: scale(1.5);</div><div class="line">          &#125;</div><div class="line">          55% &#123;</div><div class="line">            transform: scale(3);</div><div class="line">          &#125;</div><div class="line">          100% &#123;</div><div class="line">            opacity: 0;</div><div class="line">            transform: scale(50);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">		@-ms-keyframes heart-anim &#123;</div><div class="line">          46% &#123;</div><div class="line"></div><div class="line">            transform: scale(1);</div><div class="line">          &#125;</div><div class="line">          50% &#123;</div><div class="line">            transform: scale(1.3);</div><div class="line">          &#125;</div><div class="line">          52% &#123;</div><div class="line">            transform: scale(1.5);</div><div class="line">          &#125;</div><div class="line">          55% &#123;</div><div class="line">            transform: scale(3);</div><div class="line">          &#125;</div><div class="line">          100% &#123;</div><div class="line">            opacity: 0;</div><div class="line">            transform: scale(50);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;img scr=&quot;http://ojjsl7zpc.bkt.clouddn.com/myHeart.gif?e=1487091193&amp;token=NUT82f__mRq-ZGvkrbqw7Zxle80aB7nUArvrHibz:nDhjIQhcA5hcRQ-bZFh3skYsOls&quot; alt=&quot;niaogege-myHeart&quot; /&gt;</div><div class="line">  &lt;p&gt;</div><div class="line">  情人节又到了，一大波男士在狠狠地吃狗粮！！</div><div class="line"> &lt;/p&gt;</div><div class="line">    &lt;!--外圈大心--&gt;</div><div class="line">   &lt;div class=&quot;heart heart1&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;!--里面小心--&gt;</div><div class="line">   &lt;div class=&quot;heart heart2&quot;&gt;&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是情人节，微信/微博都在撒狗粮，看看myHeart吧&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;img src=&quot;http://ojjsl7zpc.bkt.clouddn.com/myHeart.gif?e=1487392781&amp;token=NUT82f__mRq-ZGvkrbqw7Zxle80aB7nUArvrHibz:53339dxMjMwHLm1k-RjUMaQHdFg&quot; /&gt;&lt;/h2&gt;&lt;p&gt;源代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://niaogege.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://niaogege.site/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="前端" scheme="http://niaogege.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://niaogege.site/tags/css/"/>
    
  </entry>
  
</feed>
